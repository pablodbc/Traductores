-----------------------------------------------------------------------------
Info file generated by Happy Version 1.19.5 from Grammar.y
-----------------------------------------------------------------------------


-----------------------------------------------------------------------------
Grammar
-----------------------------------------------------------------------------
	%start_parse -> Init                               (0)
	Init -> Program                                    (1)
	Init -> ListaF Program                             (2)
	Program -> program with do Bloque end ';'          (3)
	Program -> program with ListaD do Bloque end ';'   (4)
	BloqueR -> AnidR                                   (5)
	BloqueR -> BloqueR AnidR                           (6)
	AnidR -> AnidS                                     (7)
	AnidR -> return Expr                               (8)
	BWhile -> while Expr then Bloque end ';'           (9)
	BFor -> for identifier from Expr to Expr do Bloque end ';'   (10)
	BFor -> for identifier from Expr to Expr by Expr do Bloque end ';'   (11)
	BRep -> repeat Expr times Bloque end ';'           (12)
	Bloque -> AnidS                                    (13)
	Bloque -> Bloque AnidS                             (14)
	Bloque -> ListaIn                                  (15)
	AnidS -> BIf                                       (16)
	AnidS -> BWith                                     (17)
	AnidS -> BWhile                                    (18)
	AnidS -> BFor                                      (19)
	AnidS -> BRep                                      (20)
	Param ->                                           (21)
	Param -> ParamD                                    (22)
	ParamD -> Tipo identifier                          (23)
	ParamD -> ParamD ',' Tipo identifier               (24)
	FunDec -> func identifier '(' Param ')' begin Bloque end ';'   (25)
	FunDec -> func identifier '(' Param ')' '->' Tipo begin BloqueR end ';'   (26)
	ListaF -> FunDec                                   (27)
	ListaF -> ListaF FunDec                            (28)
	BIf -> if Expr then Bloque else Bloque end ';'     (29)
	BIf -> if Expr then Bloque end ';'                 (30)
	BWith -> with do Bloque end ';'                    (31)
	BWith -> with ListaD do Bloque end ';'             (32)
	ListaIn -> Ins ';'                                 (33)
	ListaIn -> ListaIn Ins ';'                         (34)
	Ins -> Asig                                        (35)
	Ins -> Funcion                                     (36)
	Ins -> Leer                                        (37)
	Ins -> Escribir                                    (38)
	Ins -> EscribirLn                                  (39)
	ListaD -> Decl ';'                                 (40)
	ListaD -> ListaD Decl ';'                          (41)
	Decl -> Tipo Asig                                  (42)
	Decl -> Tipo ListaI                                (43)
	Tipo -> number                                     (44)
	Tipo -> boolean                                    (45)
	ListaI -> identifier                               (46)
	ListaI -> ListaI ',' identifier                    (47)
	Asig -> identifier '=' Expr                        (48)
	ArgW -> ExprS                                      (49)
	ArgW -> ArgW ',' ExprS                             (50)
	ExprS -> Expr                                      (51)
	ExprS -> str                                       (52)
	Leer -> read identifier                            (53)
	Escribir -> write ArgW                             (54)
	EscribirLn -> writeln ArgW                         (55)
	Args -> Expr                                       (56)
	Args -> Args ',' Expr                              (57)
	Funcion -> identifier '(' ')'                      (58)
	Funcion -> identifier '(' Args ')'                 (59)
	Expr -> Expr or Expr                               (60)
	Expr -> Expr and Expr                              (61)
	Expr -> Expr '==' Expr                             (62)
	Expr -> Expr '/=' Expr                             (63)
	Expr -> Expr '<' Expr                              (64)
	Expr -> Expr '<=' Expr                             (65)
	Expr -> Expr '>' Expr                              (66)
	Expr -> Expr '>=' Expr                             (67)
	Expr -> Expr '+' Expr                              (68)
	Expr -> Expr '-' Expr                              (69)
	Expr -> Expr '*' Expr                              (70)
	Expr -> Expr '/' Expr                              (71)
	Expr -> Expr '%' Expr                              (72)
	Expr -> Expr div Expr                              (73)
	Expr -> Expr mod Expr                              (74)
	Expr -> '(' Expr ')'                               (75)
	Expr -> not Expr                                   (76)
	Expr -> '-' Expr                                   (77)
	Expr -> identifier                                 (78)
	Expr -> integer                                    (79)
	Expr -> floating                                   (80)
	Expr -> true                                       (81)
	Expr -> false                                      (82)
	Expr -> Funcion                                    (83)

-----------------------------------------------------------------------------
Terminals
-----------------------------------------------------------------------------
	'%'            { (Lexer.Modex _ _) }
	'/'            { (Lexer.Divex _ _) }
	'*'            { (Lexer.Mult _ _) }
	'-'            { (Lexer.Minus _ _) }
	')'            { (Lexer.CloseP _ _) }
	'('            { (Lexer.OpenP _ _) }
	'+'            { (Lexer.Plus _ _) }
	'='            { (Lexer.Def _ _) }
	';'            { (Lexer.SemiColon _ _) }
	','            { (Lexer.Comma _ _) }
	'<'            { (Lexer.Less _ _) }
	'>'            { (Lexer.More _ _) }
	'=='           { (Lexer.Eq _ _) }
	'/='           { (Lexer.Neq _ _) }
	'>='           { (Lexer.Moreq _ _) }
	'<='           { (Lexer.Lesseq _ _) }
	'->'           { (Lexer.Arrow _ _) }
	not            { (Lexer.Not _ _) }
	and            { (Lexer.And _ _) }
	or             { (Lexer.Or _ _) }
	div            { (Lexer.Div _ _) }
	mod            { (Lexer.Mod _ _) }
	number         { (Lexer.Number _ _) }
	boolean        { (Lexer.Boolean _ _) }
	true           { (Lexer.True' _ _) }
	false          { (Lexer.False' _ _) }
	with           { (Lexer.With _ _) }
	do             { (Lexer.Do _ _) }
	end            { (Lexer.End _ _) }
	if             { (Lexer.If _ _) }
	then           { (Lexer.Then _ _) }
	else           { (Lexer.Else _ _) }
	while          { (Lexer.While _ _) }
	for            { (Lexer.For _ _) }
	repeat         { (Lexer.Repeat _ _) }
	begin          { (Lexer.Begin _ _) }
	return         { (Lexer.Return _ _) }
	func           { (Lexer.Func _ _) }
	times          { (Lexer.Times _ _) }
	program        { (Lexer.Program _ _) }
	integer        { (Lexer.Integer _  _) }
	floating       { (Lexer.Floating _  _) }
	str            { (Lexer.Str _ _) }
	identifier     { (Lexer.Identifier _ _) }
	writeln        { (Lexer.WriteLn _ _) }
	write          { (Lexer.Write _ _) }
	read           { (Lexer.Read _ _) }
	by             { (Lexer.By _ _) }
	from           { (Lexer.From _ _) }
	to             { (Lexer.To _ _) }

-----------------------------------------------------------------------------
Non-terminals
-----------------------------------------------------------------------------
	%start_parse    rule  0
	Init            rules 1, 2
	Program         rules 3, 4
	BloqueR         rules 5, 6
	AnidR           rules 7, 8
	BWhile          rule  9
	BFor            rules 10, 11
	BRep            rule  12
	Bloque          rules 13, 14, 15
	AnidS           rules 16, 17, 18, 19, 20
	Param           rules 21, 22
	ParamD          rules 23, 24
	FunDec          rules 25, 26
	ListaF          rules 27, 28
	BIf             rules 29, 30
	BWith           rules 31, 32
	ListaIn         rules 33, 34
	Ins             rules 35, 36, 37, 38, 39
	ListaD          rules 40, 41
	Decl            rules 42, 43
	Tipo            rules 44, 45
	ListaI          rules 46, 47
	Asig            rule  48
	ArgW            rules 49, 50
	ExprS           rules 51, 52
	Leer            rule  53
	Escribir        rule  54
	EscribirLn      rule  55
	Args            rules 56, 57
	Funcion         rules 58, 59
	Expr            rules 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83

-----------------------------------------------------------------------------
States
-----------------------------------------------------------------------------
State 0


	func           shift, and enter state 7
	program        shift, and enter state 3

	Init           goto state 4
	Program        goto state 2
	FunDec         goto state 5
	ListaF         goto state 6

State 1


	program        shift, and enter state 3

	Program        goto state 2

State 2

	Init -> Program .                                   (rule 1)

	%eof           reduce using rule 1


State 3

	Program -> program . with do Bloque end ';'         (rule 3)
	Program -> program . with ListaD do Bloque end ';'    (rule 4)

	with           shift, and enter state 11


State 4

	%start_parse -> Init .                              (rule 0)

	%eof           accept


State 5

	ListaF -> FunDec .                                  (rule 27)

	func           reduce using rule 27
	program        reduce using rule 27


State 6

	Init -> ListaF . Program                            (rule 2)
	ListaF -> ListaF . FunDec                           (rule 28)

	func           shift, and enter state 7
	program        shift, and enter state 3

	Program        goto state 9
	FunDec         goto state 10

State 7

	FunDec -> func . identifier '(' Param ')' begin Bloque end ';'    (rule 25)
	FunDec -> func . identifier '(' Param ')' '->' Tipo begin BloqueR end ';'    (rule 26)

	identifier     shift, and enter state 8


State 8

	FunDec -> func identifier . '(' Param ')' begin Bloque end ';'    (rule 25)
	FunDec -> func identifier . '(' Param ')' '->' Tipo begin BloqueR end ';'    (rule 26)

	'('            shift, and enter state 18


State 9

	Init -> ListaF Program .                            (rule 2)

	%eof           reduce using rule 2


State 10

	ListaF -> ListaF FunDec .                           (rule 28)

	func           reduce using rule 28
	program        reduce using rule 28


State 11

	Program -> program with . do Bloque end ';'         (rule 3)
	Program -> program with . ListaD do Bloque end ';'    (rule 4)

	number         shift, and enter state 15
	boolean        shift, and enter state 16
	do             shift, and enter state 17

	ListaD         goto state 12
	Decl           goto state 13
	Tipo           goto state 14

State 12

	Program -> program with ListaD . do Bloque end ';'    (rule 4)
	ListaD -> ListaD . Decl ';'                         (rule 41)

	number         shift, and enter state 15
	boolean        shift, and enter state 16
	do             shift, and enter state 50

	Decl           goto state 49
	Tipo           goto state 14

State 13

	ListaD -> Decl . ';'                                (rule 40)

	';'            shift, and enter state 48


State 14

	Decl -> Tipo . Asig                                 (rule 42)
	Decl -> Tipo . ListaI                               (rule 43)

	identifier     shift, and enter state 47

	ListaI         goto state 45
	Asig           goto state 46

State 15

	Tipo -> number .                                    (rule 44)

	begin          reduce using rule 44
	identifier     reduce using rule 44


State 16

	Tipo -> boolean .                                   (rule 45)

	begin          reduce using rule 45
	identifier     reduce using rule 45


State 17

	Program -> program with do . Bloque end ';'         (rule 3)

	with           shift, and enter state 36
	if             shift, and enter state 37
	while          shift, and enter state 38
	for            shift, and enter state 39
	repeat         shift, and enter state 40
	identifier     shift, and enter state 41
	writeln        shift, and enter state 42
	write          shift, and enter state 43
	read           shift, and enter state 44

	BWhile         goto state 22
	BFor           goto state 23
	BRep           goto state 24
	Bloque         goto state 25
	AnidS          goto state 26
	BIf            goto state 27
	BWith          goto state 28
	ListaIn        goto state 29
	Ins            goto state 30
	Asig           goto state 31
	Leer           goto state 32
	Escribir       goto state 33
	EscribirLn     goto state 34
	Funcion        goto state 35

State 18

	FunDec -> func identifier '(' . Param ')' begin Bloque end ';'    (rule 25)
	FunDec -> func identifier '(' . Param ')' '->' Tipo begin BloqueR end ';'    (rule 26)

	')'            reduce using rule 21
	number         shift, and enter state 15
	boolean        shift, and enter state 16

	Param          goto state 19
	ParamD         goto state 20
	Tipo           goto state 21

State 19

	FunDec -> func identifier '(' Param . ')' begin Bloque end ';'    (rule 25)
	FunDec -> func identifier '(' Param . ')' '->' Tipo begin BloqueR end ';'    (rule 26)

	')'            shift, and enter state 83


State 20

	Param -> ParamD .                                   (rule 22)
	ParamD -> ParamD . ',' Tipo identifier              (rule 24)

	')'            reduce using rule 22
	','            shift, and enter state 82


State 21

	ParamD -> Tipo . identifier                         (rule 23)

	identifier     shift, and enter state 81


State 22

	AnidS -> BWhile .                                   (rule 18)

	with           reduce using rule 18
	end            reduce using rule 18
	if             reduce using rule 18
	else           reduce using rule 18
	while          reduce using rule 18
	for            reduce using rule 18
	repeat         reduce using rule 18
	return         reduce using rule 18


State 23

	AnidS -> BFor .                                     (rule 19)

	with           reduce using rule 19
	end            reduce using rule 19
	if             reduce using rule 19
	else           reduce using rule 19
	while          reduce using rule 19
	for            reduce using rule 19
	repeat         reduce using rule 19
	return         reduce using rule 19


State 24

	AnidS -> BRep .                                     (rule 20)

	with           reduce using rule 20
	end            reduce using rule 20
	if             reduce using rule 20
	else           reduce using rule 20
	while          reduce using rule 20
	for            reduce using rule 20
	repeat         reduce using rule 20
	return         reduce using rule 20


State 25

	Program -> program with do Bloque . end ';'         (rule 3)
	Bloque -> Bloque . AnidS                            (rule 14)

	with           shift, and enter state 36
	end            shift, and enter state 80
	if             shift, and enter state 37
	while          shift, and enter state 38
	for            shift, and enter state 39
	repeat         shift, and enter state 40

	BWhile         goto state 22
	BFor           goto state 23
	BRep           goto state 24
	AnidS          goto state 79
	BIf            goto state 27
	BWith          goto state 28

State 26

	Bloque -> AnidS .                                   (rule 13)

	with           reduce using rule 13
	end            reduce using rule 13
	if             reduce using rule 13
	else           reduce using rule 13
	while          reduce using rule 13
	for            reduce using rule 13
	repeat         reduce using rule 13


State 27

	AnidS -> BIf .                                      (rule 16)

	with           reduce using rule 16
	end            reduce using rule 16
	if             reduce using rule 16
	else           reduce using rule 16
	while          reduce using rule 16
	for            reduce using rule 16
	repeat         reduce using rule 16
	return         reduce using rule 16


State 28

	AnidS -> BWith .                                    (rule 17)

	with           reduce using rule 17
	end            reduce using rule 17
	if             reduce using rule 17
	else           reduce using rule 17
	while          reduce using rule 17
	for            reduce using rule 17
	repeat         reduce using rule 17
	return         reduce using rule 17


State 29

	Bloque -> ListaIn .                                 (rule 15)
	ListaIn -> ListaIn . Ins ';'                        (rule 34)

	with           reduce using rule 15
	end            reduce using rule 15
	if             reduce using rule 15
	else           reduce using rule 15
	while          reduce using rule 15
	for            reduce using rule 15
	repeat         reduce using rule 15
	identifier     shift, and enter state 41
	writeln        shift, and enter state 42
	write          shift, and enter state 43
	read           shift, and enter state 44

	Ins            goto state 78
	Asig           goto state 31
	Leer           goto state 32
	Escribir       goto state 33
	EscribirLn     goto state 34
	Funcion        goto state 35

State 30

	ListaIn -> Ins . ';'                                (rule 33)

	';'            shift, and enter state 77


State 31

	Ins -> Asig .                                       (rule 35)

	';'            reduce using rule 35


State 32

	Ins -> Leer .                                       (rule 37)

	';'            reduce using rule 37


State 33

	Ins -> Escribir .                                   (rule 38)

	';'            reduce using rule 38


State 34

	Ins -> EscribirLn .                                 (rule 39)

	';'            reduce using rule 39


State 35

	Ins -> Funcion .                                    (rule 36)

	';'            reduce using rule 36


State 36

	BWith -> with . do Bloque end ';'                   (rule 31)
	BWith -> with . ListaD do Bloque end ';'            (rule 32)

	number         shift, and enter state 15
	boolean        shift, and enter state 16
	do             shift, and enter state 76

	ListaD         goto state 75
	Decl           goto state 13
	Tipo           goto state 14

State 37

	BIf -> if . Expr then Bloque else Bloque end ';'    (rule 29)
	BIf -> if . Expr then Bloque end ';'                (rule 30)

	'-'            shift, and enter state 60
	'('            shift, and enter state 61
	not            shift, and enter state 62
	true           shift, and enter state 63
	false          shift, and enter state 64
	integer        shift, and enter state 65
	floating       shift, and enter state 66
	identifier     shift, and enter state 68

	Funcion        goto state 58
	Expr           goto state 74

State 38

	BWhile -> while . Expr then Bloque end ';'          (rule 9)

	'-'            shift, and enter state 60
	'('            shift, and enter state 61
	not            shift, and enter state 62
	true           shift, and enter state 63
	false          shift, and enter state 64
	integer        shift, and enter state 65
	floating       shift, and enter state 66
	identifier     shift, and enter state 68

	Funcion        goto state 58
	Expr           goto state 73

State 39

	BFor -> for . identifier from Expr to Expr do Bloque end ';'    (rule 10)
	BFor -> for . identifier from Expr to Expr by Expr do Bloque end ';'    (rule 11)

	identifier     shift, and enter state 72


State 40

	BRep -> repeat . Expr times Bloque end ';'          (rule 12)

	'-'            shift, and enter state 60
	'('            shift, and enter state 61
	not            shift, and enter state 62
	true           shift, and enter state 63
	false          shift, and enter state 64
	integer        shift, and enter state 65
	floating       shift, and enter state 66
	identifier     shift, and enter state 68

	Funcion        goto state 58
	Expr           goto state 71

State 41

	Asig -> identifier . '=' Expr                       (rule 48)
	Funcion -> identifier . '(' ')'                     (rule 58)
	Funcion -> identifier . '(' Args ')'                (rule 59)

	'('            shift, and enter state 70
	'='            shift, and enter state 53


State 42

	EscribirLn -> writeln . ArgW                        (rule 55)

	'-'            shift, and enter state 60
	'('            shift, and enter state 61
	not            shift, and enter state 62
	true           shift, and enter state 63
	false          shift, and enter state 64
	integer        shift, and enter state 65
	floating       shift, and enter state 66
	str            shift, and enter state 67
	identifier     shift, and enter state 68

	ArgW           goto state 69
	ExprS          goto state 57
	Funcion        goto state 58
	Expr           goto state 59

State 43

	Escribir -> write . ArgW                            (rule 54)

	'-'            shift, and enter state 60
	'('            shift, and enter state 61
	not            shift, and enter state 62
	true           shift, and enter state 63
	false          shift, and enter state 64
	integer        shift, and enter state 65
	floating       shift, and enter state 66
	str            shift, and enter state 67
	identifier     shift, and enter state 68

	ArgW           goto state 56
	ExprS          goto state 57
	Funcion        goto state 58
	Expr           goto state 59

State 44

	Leer -> read . identifier                           (rule 53)

	identifier     shift, and enter state 55


State 45

	Decl -> Tipo ListaI .                               (rule 43)
	ListaI -> ListaI . ',' identifier                   (rule 47)

	';'            reduce using rule 43
	','            shift, and enter state 54


State 46

	Decl -> Tipo Asig .                                 (rule 42)

	';'            reduce using rule 42


State 47

	ListaI -> identifier .                              (rule 46)
	Asig -> identifier . '=' Expr                       (rule 48)

	'='            shift, and enter state 53
	';'            reduce using rule 46
	','            reduce using rule 46


State 48

	ListaD -> Decl ';' .                                (rule 40)

	number         reduce using rule 40
	boolean        reduce using rule 40
	do             reduce using rule 40


State 49

	ListaD -> ListaD Decl . ';'                         (rule 41)

	';'            shift, and enter state 52


State 50

	Program -> program with ListaD do . Bloque end ';'    (rule 4)

	with           shift, and enter state 36
	if             shift, and enter state 37
	while          shift, and enter state 38
	for            shift, and enter state 39
	repeat         shift, and enter state 40
	identifier     shift, and enter state 41
	writeln        shift, and enter state 42
	write          shift, and enter state 43
	read           shift, and enter state 44

	BWhile         goto state 22
	BFor           goto state 23
	BRep           goto state 24
	Bloque         goto state 51
	AnidS          goto state 26
	BIf            goto state 27
	BWith          goto state 28
	ListaIn        goto state 29
	Ins            goto state 30
	Asig           goto state 31
	Leer           goto state 32
	Escribir       goto state 33
	EscribirLn     goto state 34
	Funcion        goto state 35

State 51

	Program -> program with ListaD do Bloque . end ';'    (rule 4)
	Bloque -> Bloque . AnidS                            (rule 14)

	with           shift, and enter state 36
	end            shift, and enter state 119
	if             shift, and enter state 37
	while          shift, and enter state 38
	for            shift, and enter state 39
	repeat         shift, and enter state 40

	BWhile         goto state 22
	BFor           goto state 23
	BRep           goto state 24
	AnidS          goto state 79
	BIf            goto state 27
	BWith          goto state 28

State 52

	ListaD -> ListaD Decl ';' .                         (rule 41)

	number         reduce using rule 41
	boolean        reduce using rule 41
	do             reduce using rule 41


State 53

	Asig -> identifier '=' . Expr                       (rule 48)

	'-'            shift, and enter state 60
	'('            shift, and enter state 61
	not            shift, and enter state 62
	true           shift, and enter state 63
	false          shift, and enter state 64
	integer        shift, and enter state 65
	floating       shift, and enter state 66
	identifier     shift, and enter state 68

	Funcion        goto state 58
	Expr           goto state 118

State 54

	ListaI -> ListaI ',' . identifier                   (rule 47)

	identifier     shift, and enter state 117


State 55

	Leer -> read identifier .                           (rule 53)

	';'            reduce using rule 53


State 56

	ArgW -> ArgW . ',' ExprS                            (rule 50)
	Escribir -> write ArgW .                            (rule 54)

	';'            reduce using rule 54
	','            shift, and enter state 113


State 57

	ArgW -> ExprS .                                     (rule 49)

	';'            reduce using rule 49
	','            reduce using rule 49


State 58

	Expr -> Funcion .                                   (rule 83)

	'%'            reduce using rule 83
	'/'            reduce using rule 83
	'*'            reduce using rule 83
	'-'            reduce using rule 83
	')'            reduce using rule 83
	'+'            reduce using rule 83
	';'            reduce using rule 83
	','            reduce using rule 83
	'<'            reduce using rule 83
	'>'            reduce using rule 83
	'=='           reduce using rule 83
	'/='           reduce using rule 83
	'>='           reduce using rule 83
	'<='           reduce using rule 83
	and            reduce using rule 83
	or             reduce using rule 83
	div            reduce using rule 83
	mod            reduce using rule 83
	with           reduce using rule 83
	do             reduce using rule 83
	end            reduce using rule 83
	if             reduce using rule 83
	then           reduce using rule 83
	while          reduce using rule 83
	for            reduce using rule 83
	repeat         reduce using rule 83
	return         reduce using rule 83
	times          reduce using rule 83
	by             reduce using rule 83
	to             reduce using rule 83


State 59

	ExprS -> Expr .                                     (rule 51)
	Expr -> Expr . or Expr                              (rule 60)
	Expr -> Expr . and Expr                             (rule 61)
	Expr -> Expr . '==' Expr                            (rule 62)
	Expr -> Expr . '/=' Expr                            (rule 63)
	Expr -> Expr . '<' Expr                             (rule 64)
	Expr -> Expr . '<=' Expr                            (rule 65)
	Expr -> Expr . '>' Expr                             (rule 66)
	Expr -> Expr . '>=' Expr                            (rule 67)
	Expr -> Expr . '+' Expr                             (rule 68)
	Expr -> Expr . '-' Expr                             (rule 69)
	Expr -> Expr . '*' Expr                             (rule 70)
	Expr -> Expr . '/' Expr                             (rule 71)
	Expr -> Expr . '%' Expr                             (rule 72)
	Expr -> Expr . div Expr                             (rule 73)
	Expr -> Expr . mod Expr                             (rule 74)

	'%'            shift, and enter state 91
	'/'            shift, and enter state 92
	'*'            shift, and enter state 93
	'-'            shift, and enter state 94
	'+'            shift, and enter state 95
	';'            reduce using rule 51
	','            reduce using rule 51
	'<'            shift, and enter state 96
	'>'            shift, and enter state 97
	'=='           shift, and enter state 98
	'/='           shift, and enter state 99
	'>='           shift, and enter state 100
	'<='           shift, and enter state 101
	and            shift, and enter state 102
	or             shift, and enter state 103
	div            shift, and enter state 104
	mod            shift, and enter state 105


State 60

	Expr -> '-' . Expr                                  (rule 77)

	'-'            shift, and enter state 60
	'('            shift, and enter state 61
	not            shift, and enter state 62
	true           shift, and enter state 63
	false          shift, and enter state 64
	integer        shift, and enter state 65
	floating       shift, and enter state 66
	identifier     shift, and enter state 68

	Funcion        goto state 58
	Expr           goto state 116

State 61

	Expr -> '(' . Expr ')'                              (rule 75)

	'-'            shift, and enter state 60
	'('            shift, and enter state 61
	not            shift, and enter state 62
	true           shift, and enter state 63
	false          shift, and enter state 64
	integer        shift, and enter state 65
	floating       shift, and enter state 66
	identifier     shift, and enter state 68

	Funcion        goto state 58
	Expr           goto state 115

State 62

	Expr -> not . Expr                                  (rule 76)

	'-'            shift, and enter state 60
	'('            shift, and enter state 61
	not            shift, and enter state 62
	true           shift, and enter state 63
	false          shift, and enter state 64
	integer        shift, and enter state 65
	floating       shift, and enter state 66
	identifier     shift, and enter state 68

	Funcion        goto state 58
	Expr           goto state 114

State 63

	Expr -> true .                                      (rule 81)

	'%'            reduce using rule 81
	'/'            reduce using rule 81
	'*'            reduce using rule 81
	'-'            reduce using rule 81
	')'            reduce using rule 81
	'+'            reduce using rule 81
	';'            reduce using rule 81
	','            reduce using rule 81
	'<'            reduce using rule 81
	'>'            reduce using rule 81
	'=='           reduce using rule 81
	'/='           reduce using rule 81
	'>='           reduce using rule 81
	'<='           reduce using rule 81
	and            reduce using rule 81
	or             reduce using rule 81
	div            reduce using rule 81
	mod            reduce using rule 81
	with           reduce using rule 81
	do             reduce using rule 81
	end            reduce using rule 81
	if             reduce using rule 81
	then           reduce using rule 81
	while          reduce using rule 81
	for            reduce using rule 81
	repeat         reduce using rule 81
	return         reduce using rule 81
	times          reduce using rule 81
	by             reduce using rule 81
	to             reduce using rule 81


State 64

	Expr -> false .                                     (rule 82)

	'%'            reduce using rule 82
	'/'            reduce using rule 82
	'*'            reduce using rule 82
	'-'            reduce using rule 82
	')'            reduce using rule 82
	'+'            reduce using rule 82
	';'            reduce using rule 82
	','            reduce using rule 82
	'<'            reduce using rule 82
	'>'            reduce using rule 82
	'=='           reduce using rule 82
	'/='           reduce using rule 82
	'>='           reduce using rule 82
	'<='           reduce using rule 82
	and            reduce using rule 82
	or             reduce using rule 82
	div            reduce using rule 82
	mod            reduce using rule 82
	with           reduce using rule 82
	do             reduce using rule 82
	end            reduce using rule 82
	if             reduce using rule 82
	then           reduce using rule 82
	while          reduce using rule 82
	for            reduce using rule 82
	repeat         reduce using rule 82
	return         reduce using rule 82
	times          reduce using rule 82
	by             reduce using rule 82
	to             reduce using rule 82


State 65

	Expr -> integer .                                   (rule 79)

	'%'            reduce using rule 79
	'/'            reduce using rule 79
	'*'            reduce using rule 79
	'-'            reduce using rule 79
	')'            reduce using rule 79
	'+'            reduce using rule 79
	';'            reduce using rule 79
	','            reduce using rule 79
	'<'            reduce using rule 79
	'>'            reduce using rule 79
	'=='           reduce using rule 79
	'/='           reduce using rule 79
	'>='           reduce using rule 79
	'<='           reduce using rule 79
	and            reduce using rule 79
	or             reduce using rule 79
	div            reduce using rule 79
	mod            reduce using rule 79
	with           reduce using rule 79
	do             reduce using rule 79
	end            reduce using rule 79
	if             reduce using rule 79
	then           reduce using rule 79
	while          reduce using rule 79
	for            reduce using rule 79
	repeat         reduce using rule 79
	return         reduce using rule 79
	times          reduce using rule 79
	by             reduce using rule 79
	to             reduce using rule 79


State 66

	Expr -> floating .                                  (rule 80)

	'%'            reduce using rule 80
	'/'            reduce using rule 80
	'*'            reduce using rule 80
	'-'            reduce using rule 80
	')'            reduce using rule 80
	'+'            reduce using rule 80
	';'            reduce using rule 80
	','            reduce using rule 80
	'<'            reduce using rule 80
	'>'            reduce using rule 80
	'=='           reduce using rule 80
	'/='           reduce using rule 80
	'>='           reduce using rule 80
	'<='           reduce using rule 80
	and            reduce using rule 80
	or             reduce using rule 80
	div            reduce using rule 80
	mod            reduce using rule 80
	with           reduce using rule 80
	do             reduce using rule 80
	end            reduce using rule 80
	if             reduce using rule 80
	then           reduce using rule 80
	while          reduce using rule 80
	for            reduce using rule 80
	repeat         reduce using rule 80
	return         reduce using rule 80
	times          reduce using rule 80
	by             reduce using rule 80
	to             reduce using rule 80


State 67

	ExprS -> str .                                      (rule 52)

	';'            reduce using rule 52
	','            reduce using rule 52


State 68

	Funcion -> identifier . '(' ')'                     (rule 58)
	Funcion -> identifier . '(' Args ')'                (rule 59)
	Expr -> identifier .                                (rule 78)

	'%'            reduce using rule 78
	'/'            reduce using rule 78
	'*'            reduce using rule 78
	'-'            reduce using rule 78
	')'            reduce using rule 78
	'('            shift, and enter state 70
	'+'            reduce using rule 78
	';'            reduce using rule 78
	','            reduce using rule 78
	'<'            reduce using rule 78
	'>'            reduce using rule 78
	'=='           reduce using rule 78
	'/='           reduce using rule 78
	'>='           reduce using rule 78
	'<='           reduce using rule 78
	and            reduce using rule 78
	or             reduce using rule 78
	div            reduce using rule 78
	mod            reduce using rule 78
	with           reduce using rule 78
	do             reduce using rule 78
	end            reduce using rule 78
	if             reduce using rule 78
	then           reduce using rule 78
	while          reduce using rule 78
	for            reduce using rule 78
	repeat         reduce using rule 78
	return         reduce using rule 78
	times          reduce using rule 78
	by             reduce using rule 78
	to             reduce using rule 78


State 69

	ArgW -> ArgW . ',' ExprS                            (rule 50)
	EscribirLn -> writeln ArgW .                        (rule 55)

	';'            reduce using rule 55
	','            shift, and enter state 113


State 70

	Funcion -> identifier '(' . ')'                     (rule 58)
	Funcion -> identifier '(' . Args ')'                (rule 59)

	'-'            shift, and enter state 60
	')'            shift, and enter state 112
	'('            shift, and enter state 61
	not            shift, and enter state 62
	true           shift, and enter state 63
	false          shift, and enter state 64
	integer        shift, and enter state 65
	floating       shift, and enter state 66
	identifier     shift, and enter state 68

	Args           goto state 110
	Funcion        goto state 58
	Expr           goto state 111

State 71

	BRep -> repeat Expr . times Bloque end ';'          (rule 12)
	Expr -> Expr . or Expr                              (rule 60)
	Expr -> Expr . and Expr                             (rule 61)
	Expr -> Expr . '==' Expr                            (rule 62)
	Expr -> Expr . '/=' Expr                            (rule 63)
	Expr -> Expr . '<' Expr                             (rule 64)
	Expr -> Expr . '<=' Expr                            (rule 65)
	Expr -> Expr . '>' Expr                             (rule 66)
	Expr -> Expr . '>=' Expr                            (rule 67)
	Expr -> Expr . '+' Expr                             (rule 68)
	Expr -> Expr . '-' Expr                             (rule 69)
	Expr -> Expr . '*' Expr                             (rule 70)
	Expr -> Expr . '/' Expr                             (rule 71)
	Expr -> Expr . '%' Expr                             (rule 72)
	Expr -> Expr . div Expr                             (rule 73)
	Expr -> Expr . mod Expr                             (rule 74)

	'%'            shift, and enter state 91
	'/'            shift, and enter state 92
	'*'            shift, and enter state 93
	'-'            shift, and enter state 94
	'+'            shift, and enter state 95
	'<'            shift, and enter state 96
	'>'            shift, and enter state 97
	'=='           shift, and enter state 98
	'/='           shift, and enter state 99
	'>='           shift, and enter state 100
	'<='           shift, and enter state 101
	and            shift, and enter state 102
	or             shift, and enter state 103
	div            shift, and enter state 104
	mod            shift, and enter state 105
	times          shift, and enter state 109


State 72

	BFor -> for identifier . from Expr to Expr do Bloque end ';'    (rule 10)
	BFor -> for identifier . from Expr to Expr by Expr do Bloque end ';'    (rule 11)

	from           shift, and enter state 108


State 73

	BWhile -> while Expr . then Bloque end ';'          (rule 9)
	Expr -> Expr . or Expr                              (rule 60)
	Expr -> Expr . and Expr                             (rule 61)
	Expr -> Expr . '==' Expr                            (rule 62)
	Expr -> Expr . '/=' Expr                            (rule 63)
	Expr -> Expr . '<' Expr                             (rule 64)
	Expr -> Expr . '<=' Expr                            (rule 65)
	Expr -> Expr . '>' Expr                             (rule 66)
	Expr -> Expr . '>=' Expr                            (rule 67)
	Expr -> Expr . '+' Expr                             (rule 68)
	Expr -> Expr . '-' Expr                             (rule 69)
	Expr -> Expr . '*' Expr                             (rule 70)
	Expr -> Expr . '/' Expr                             (rule 71)
	Expr -> Expr . '%' Expr                             (rule 72)
	Expr -> Expr . div Expr                             (rule 73)
	Expr -> Expr . mod Expr                             (rule 74)

	'%'            shift, and enter state 91
	'/'            shift, and enter state 92
	'*'            shift, and enter state 93
	'-'            shift, and enter state 94
	'+'            shift, and enter state 95
	'<'            shift, and enter state 96
	'>'            shift, and enter state 97
	'=='           shift, and enter state 98
	'/='           shift, and enter state 99
	'>='           shift, and enter state 100
	'<='           shift, and enter state 101
	and            shift, and enter state 102
	or             shift, and enter state 103
	div            shift, and enter state 104
	mod            shift, and enter state 105
	then           shift, and enter state 107


State 74

	BIf -> if Expr . then Bloque else Bloque end ';'    (rule 29)
	BIf -> if Expr . then Bloque end ';'                (rule 30)
	Expr -> Expr . or Expr                              (rule 60)
	Expr -> Expr . and Expr                             (rule 61)
	Expr -> Expr . '==' Expr                            (rule 62)
	Expr -> Expr . '/=' Expr                            (rule 63)
	Expr -> Expr . '<' Expr                             (rule 64)
	Expr -> Expr . '<=' Expr                            (rule 65)
	Expr -> Expr . '>' Expr                             (rule 66)
	Expr -> Expr . '>=' Expr                            (rule 67)
	Expr -> Expr . '+' Expr                             (rule 68)
	Expr -> Expr . '-' Expr                             (rule 69)
	Expr -> Expr . '*' Expr                             (rule 70)
	Expr -> Expr . '/' Expr                             (rule 71)
	Expr -> Expr . '%' Expr                             (rule 72)
	Expr -> Expr . div Expr                             (rule 73)
	Expr -> Expr . mod Expr                             (rule 74)

	'%'            shift, and enter state 91
	'/'            shift, and enter state 92
	'*'            shift, and enter state 93
	'-'            shift, and enter state 94
	'+'            shift, and enter state 95
	'<'            shift, and enter state 96
	'>'            shift, and enter state 97
	'=='           shift, and enter state 98
	'/='           shift, and enter state 99
	'>='           shift, and enter state 100
	'<='           shift, and enter state 101
	and            shift, and enter state 102
	or             shift, and enter state 103
	div            shift, and enter state 104
	mod            shift, and enter state 105
	then           shift, and enter state 106


State 75

	BWith -> with ListaD . do Bloque end ';'            (rule 32)
	ListaD -> ListaD . Decl ';'                         (rule 41)

	number         shift, and enter state 15
	boolean        shift, and enter state 16
	do             shift, and enter state 90

	Decl           goto state 49
	Tipo           goto state 14

State 76

	BWith -> with do . Bloque end ';'                   (rule 31)

	with           shift, and enter state 36
	if             shift, and enter state 37
	while          shift, and enter state 38
	for            shift, and enter state 39
	repeat         shift, and enter state 40
	identifier     shift, and enter state 41
	writeln        shift, and enter state 42
	write          shift, and enter state 43
	read           shift, and enter state 44

	BWhile         goto state 22
	BFor           goto state 23
	BRep           goto state 24
	Bloque         goto state 89
	AnidS          goto state 26
	BIf            goto state 27
	BWith          goto state 28
	ListaIn        goto state 29
	Ins            goto state 30
	Asig           goto state 31
	Leer           goto state 32
	Escribir       goto state 33
	EscribirLn     goto state 34
	Funcion        goto state 35

State 77

	ListaIn -> Ins ';' .                                (rule 33)

	with           reduce using rule 33
	end            reduce using rule 33
	if             reduce using rule 33
	else           reduce using rule 33
	while          reduce using rule 33
	for            reduce using rule 33
	repeat         reduce using rule 33
	identifier     reduce using rule 33
	writeln        reduce using rule 33
	write          reduce using rule 33
	read           reduce using rule 33


State 78

	ListaIn -> ListaIn Ins . ';'                        (rule 34)

	';'            shift, and enter state 88


State 79

	Bloque -> Bloque AnidS .                            (rule 14)

	with           reduce using rule 14
	end            reduce using rule 14
	if             reduce using rule 14
	else           reduce using rule 14
	while          reduce using rule 14
	for            reduce using rule 14
	repeat         reduce using rule 14


State 80

	Program -> program with do Bloque end . ';'         (rule 3)

	';'            shift, and enter state 87


State 81

	ParamD -> Tipo identifier .                         (rule 23)

	')'            reduce using rule 23
	','            reduce using rule 23


State 82

	ParamD -> ParamD ',' . Tipo identifier              (rule 24)

	number         shift, and enter state 15
	boolean        shift, and enter state 16

	Tipo           goto state 86

State 83

	FunDec -> func identifier '(' Param ')' . begin Bloque end ';'    (rule 25)
	FunDec -> func identifier '(' Param ')' . '->' Tipo begin BloqueR end ';'    (rule 26)

	'->'           shift, and enter state 84
	begin          shift, and enter state 85


State 84

	FunDec -> func identifier '(' Param ')' '->' . Tipo begin BloqueR end ';'    (rule 26)

	number         shift, and enter state 15
	boolean        shift, and enter state 16

	Tipo           goto state 148

State 85

	FunDec -> func identifier '(' Param ')' begin . Bloque end ';'    (rule 25)

	with           shift, and enter state 36
	if             shift, and enter state 37
	while          shift, and enter state 38
	for            shift, and enter state 39
	repeat         shift, and enter state 40
	identifier     shift, and enter state 41
	writeln        shift, and enter state 42
	write          shift, and enter state 43
	read           shift, and enter state 44

	BWhile         goto state 22
	BFor           goto state 23
	BRep           goto state 24
	Bloque         goto state 147
	AnidS          goto state 26
	BIf            goto state 27
	BWith          goto state 28
	ListaIn        goto state 29
	Ins            goto state 30
	Asig           goto state 31
	Leer           goto state 32
	Escribir       goto state 33
	EscribirLn     goto state 34
	Funcion        goto state 35

State 86

	ParamD -> ParamD ',' Tipo . identifier              (rule 24)

	identifier     shift, and enter state 146


State 87

	Program -> program with do Bloque end ';' .         (rule 3)

	%eof           reduce using rule 3


State 88

	ListaIn -> ListaIn Ins ';' .                        (rule 34)

	with           reduce using rule 34
	end            reduce using rule 34
	if             reduce using rule 34
	else           reduce using rule 34
	while          reduce using rule 34
	for            reduce using rule 34
	repeat         reduce using rule 34
	identifier     reduce using rule 34
	writeln        reduce using rule 34
	write          reduce using rule 34
	read           reduce using rule 34


State 89

	Bloque -> Bloque . AnidS                            (rule 14)
	BWith -> with do Bloque . end ';'                   (rule 31)

	with           shift, and enter state 36
	end            shift, and enter state 145
	if             shift, and enter state 37
	while          shift, and enter state 38
	for            shift, and enter state 39
	repeat         shift, and enter state 40

	BWhile         goto state 22
	BFor           goto state 23
	BRep           goto state 24
	AnidS          goto state 79
	BIf            goto state 27
	BWith          goto state 28

State 90

	BWith -> with ListaD do . Bloque end ';'            (rule 32)

	with           shift, and enter state 36
	if             shift, and enter state 37
	while          shift, and enter state 38
	for            shift, and enter state 39
	repeat         shift, and enter state 40
	identifier     shift, and enter state 41
	writeln        shift, and enter state 42
	write          shift, and enter state 43
	read           shift, and enter state 44

	BWhile         goto state 22
	BFor           goto state 23
	BRep           goto state 24
	Bloque         goto state 144
	AnidS          goto state 26
	BIf            goto state 27
	BWith          goto state 28
	ListaIn        goto state 29
	Ins            goto state 30
	Asig           goto state 31
	Leer           goto state 32
	Escribir       goto state 33
	EscribirLn     goto state 34
	Funcion        goto state 35

State 91

	Expr -> Expr '%' . Expr                             (rule 72)

	'-'            shift, and enter state 60
	'('            shift, and enter state 61
	not            shift, and enter state 62
	true           shift, and enter state 63
	false          shift, and enter state 64
	integer        shift, and enter state 65
	floating       shift, and enter state 66
	identifier     shift, and enter state 68

	Funcion        goto state 58
	Expr           goto state 143

State 92

	Expr -> Expr '/' . Expr                             (rule 71)

	'-'            shift, and enter state 60
	'('            shift, and enter state 61
	not            shift, and enter state 62
	true           shift, and enter state 63
	false          shift, and enter state 64
	integer        shift, and enter state 65
	floating       shift, and enter state 66
	identifier     shift, and enter state 68

	Funcion        goto state 58
	Expr           goto state 142

State 93

	Expr -> Expr '*' . Expr                             (rule 70)

	'-'            shift, and enter state 60
	'('            shift, and enter state 61
	not            shift, and enter state 62
	true           shift, and enter state 63
	false          shift, and enter state 64
	integer        shift, and enter state 65
	floating       shift, and enter state 66
	identifier     shift, and enter state 68

	Funcion        goto state 58
	Expr           goto state 141

State 94

	Expr -> Expr '-' . Expr                             (rule 69)

	'-'            shift, and enter state 60
	'('            shift, and enter state 61
	not            shift, and enter state 62
	true           shift, and enter state 63
	false          shift, and enter state 64
	integer        shift, and enter state 65
	floating       shift, and enter state 66
	identifier     shift, and enter state 68

	Funcion        goto state 58
	Expr           goto state 140

State 95

	Expr -> Expr '+' . Expr                             (rule 68)

	'-'            shift, and enter state 60
	'('            shift, and enter state 61
	not            shift, and enter state 62
	true           shift, and enter state 63
	false          shift, and enter state 64
	integer        shift, and enter state 65
	floating       shift, and enter state 66
	identifier     shift, and enter state 68

	Funcion        goto state 58
	Expr           goto state 139

State 96

	Expr -> Expr '<' . Expr                             (rule 64)

	'-'            shift, and enter state 60
	'('            shift, and enter state 61
	not            shift, and enter state 62
	true           shift, and enter state 63
	false          shift, and enter state 64
	integer        shift, and enter state 65
	floating       shift, and enter state 66
	identifier     shift, and enter state 68

	Funcion        goto state 58
	Expr           goto state 138

State 97

	Expr -> Expr '>' . Expr                             (rule 66)

	'-'            shift, and enter state 60
	'('            shift, and enter state 61
	not            shift, and enter state 62
	true           shift, and enter state 63
	false          shift, and enter state 64
	integer        shift, and enter state 65
	floating       shift, and enter state 66
	identifier     shift, and enter state 68

	Funcion        goto state 58
	Expr           goto state 137

State 98

	Expr -> Expr '==' . Expr                            (rule 62)

	'-'            shift, and enter state 60
	'('            shift, and enter state 61
	not            shift, and enter state 62
	true           shift, and enter state 63
	false          shift, and enter state 64
	integer        shift, and enter state 65
	floating       shift, and enter state 66
	identifier     shift, and enter state 68

	Funcion        goto state 58
	Expr           goto state 136

State 99

	Expr -> Expr '/=' . Expr                            (rule 63)

	'-'            shift, and enter state 60
	'('            shift, and enter state 61
	not            shift, and enter state 62
	true           shift, and enter state 63
	false          shift, and enter state 64
	integer        shift, and enter state 65
	floating       shift, and enter state 66
	identifier     shift, and enter state 68

	Funcion        goto state 58
	Expr           goto state 135

State 100

	Expr -> Expr '>=' . Expr                            (rule 67)

	'-'            shift, and enter state 60
	'('            shift, and enter state 61
	not            shift, and enter state 62
	true           shift, and enter state 63
	false          shift, and enter state 64
	integer        shift, and enter state 65
	floating       shift, and enter state 66
	identifier     shift, and enter state 68

	Funcion        goto state 58
	Expr           goto state 134

State 101

	Expr -> Expr '<=' . Expr                            (rule 65)

	'-'            shift, and enter state 60
	'('            shift, and enter state 61
	not            shift, and enter state 62
	true           shift, and enter state 63
	false          shift, and enter state 64
	integer        shift, and enter state 65
	floating       shift, and enter state 66
	identifier     shift, and enter state 68

	Funcion        goto state 58
	Expr           goto state 133

State 102

	Expr -> Expr and . Expr                             (rule 61)

	'-'            shift, and enter state 60
	'('            shift, and enter state 61
	not            shift, and enter state 62
	true           shift, and enter state 63
	false          shift, and enter state 64
	integer        shift, and enter state 65
	floating       shift, and enter state 66
	identifier     shift, and enter state 68

	Funcion        goto state 58
	Expr           goto state 132

State 103

	Expr -> Expr or . Expr                              (rule 60)

	'-'            shift, and enter state 60
	'('            shift, and enter state 61
	not            shift, and enter state 62
	true           shift, and enter state 63
	false          shift, and enter state 64
	integer        shift, and enter state 65
	floating       shift, and enter state 66
	identifier     shift, and enter state 68

	Funcion        goto state 58
	Expr           goto state 131

State 104

	Expr -> Expr div . Expr                             (rule 73)

	'-'            shift, and enter state 60
	'('            shift, and enter state 61
	not            shift, and enter state 62
	true           shift, and enter state 63
	false          shift, and enter state 64
	integer        shift, and enter state 65
	floating       shift, and enter state 66
	identifier     shift, and enter state 68

	Funcion        goto state 58
	Expr           goto state 130

State 105

	Expr -> Expr mod . Expr                             (rule 74)

	'-'            shift, and enter state 60
	'('            shift, and enter state 61
	not            shift, and enter state 62
	true           shift, and enter state 63
	false          shift, and enter state 64
	integer        shift, and enter state 65
	floating       shift, and enter state 66
	identifier     shift, and enter state 68

	Funcion        goto state 58
	Expr           goto state 129

State 106

	BIf -> if Expr then . Bloque else Bloque end ';'    (rule 29)
	BIf -> if Expr then . Bloque end ';'                (rule 30)

	with           shift, and enter state 36
	if             shift, and enter state 37
	while          shift, and enter state 38
	for            shift, and enter state 39
	repeat         shift, and enter state 40
	identifier     shift, and enter state 41
	writeln        shift, and enter state 42
	write          shift, and enter state 43
	read           shift, and enter state 44

	BWhile         goto state 22
	BFor           goto state 23
	BRep           goto state 24
	Bloque         goto state 128
	AnidS          goto state 26
	BIf            goto state 27
	BWith          goto state 28
	ListaIn        goto state 29
	Ins            goto state 30
	Asig           goto state 31
	Leer           goto state 32
	Escribir       goto state 33
	EscribirLn     goto state 34
	Funcion        goto state 35

State 107

	BWhile -> while Expr then . Bloque end ';'          (rule 9)

	with           shift, and enter state 36
	if             shift, and enter state 37
	while          shift, and enter state 38
	for            shift, and enter state 39
	repeat         shift, and enter state 40
	identifier     shift, and enter state 41
	writeln        shift, and enter state 42
	write          shift, and enter state 43
	read           shift, and enter state 44

	BWhile         goto state 22
	BFor           goto state 23
	BRep           goto state 24
	Bloque         goto state 127
	AnidS          goto state 26
	BIf            goto state 27
	BWith          goto state 28
	ListaIn        goto state 29
	Ins            goto state 30
	Asig           goto state 31
	Leer           goto state 32
	Escribir       goto state 33
	EscribirLn     goto state 34
	Funcion        goto state 35

State 108

	BFor -> for identifier from . Expr to Expr do Bloque end ';'    (rule 10)
	BFor -> for identifier from . Expr to Expr by Expr do Bloque end ';'    (rule 11)

	'-'            shift, and enter state 60
	'('            shift, and enter state 61
	not            shift, and enter state 62
	true           shift, and enter state 63
	false          shift, and enter state 64
	integer        shift, and enter state 65
	floating       shift, and enter state 66
	identifier     shift, and enter state 68

	Funcion        goto state 58
	Expr           goto state 126

State 109

	BRep -> repeat Expr times . Bloque end ';'          (rule 12)

	with           shift, and enter state 36
	if             shift, and enter state 37
	while          shift, and enter state 38
	for            shift, and enter state 39
	repeat         shift, and enter state 40
	identifier     shift, and enter state 41
	writeln        shift, and enter state 42
	write          shift, and enter state 43
	read           shift, and enter state 44

	BWhile         goto state 22
	BFor           goto state 23
	BRep           goto state 24
	Bloque         goto state 125
	AnidS          goto state 26
	BIf            goto state 27
	BWith          goto state 28
	ListaIn        goto state 29
	Ins            goto state 30
	Asig           goto state 31
	Leer           goto state 32
	Escribir       goto state 33
	EscribirLn     goto state 34
	Funcion        goto state 35

State 110

	Args -> Args . ',' Expr                             (rule 57)
	Funcion -> identifier '(' Args . ')'                (rule 59)

	')'            shift, and enter state 123
	','            shift, and enter state 124


State 111

	Args -> Expr .                                      (rule 56)
	Expr -> Expr . or Expr                              (rule 60)
	Expr -> Expr . and Expr                             (rule 61)
	Expr -> Expr . '==' Expr                            (rule 62)
	Expr -> Expr . '/=' Expr                            (rule 63)
	Expr -> Expr . '<' Expr                             (rule 64)
	Expr -> Expr . '<=' Expr                            (rule 65)
	Expr -> Expr . '>' Expr                             (rule 66)
	Expr -> Expr . '>=' Expr                            (rule 67)
	Expr -> Expr . '+' Expr                             (rule 68)
	Expr -> Expr . '-' Expr                             (rule 69)
	Expr -> Expr . '*' Expr                             (rule 70)
	Expr -> Expr . '/' Expr                             (rule 71)
	Expr -> Expr . '%' Expr                             (rule 72)
	Expr -> Expr . div Expr                             (rule 73)
	Expr -> Expr . mod Expr                             (rule 74)

	'%'            shift, and enter state 91
	'/'            shift, and enter state 92
	'*'            shift, and enter state 93
	'-'            shift, and enter state 94
	')'            reduce using rule 56
	'+'            shift, and enter state 95
	','            reduce using rule 56
	'<'            shift, and enter state 96
	'>'            shift, and enter state 97
	'=='           shift, and enter state 98
	'/='           shift, and enter state 99
	'>='           shift, and enter state 100
	'<='           shift, and enter state 101
	and            shift, and enter state 102
	or             shift, and enter state 103
	div            shift, and enter state 104
	mod            shift, and enter state 105


State 112

	Funcion -> identifier '(' ')' .                     (rule 58)

	'%'            reduce using rule 58
	'/'            reduce using rule 58
	'*'            reduce using rule 58
	'-'            reduce using rule 58
	')'            reduce using rule 58
	'+'            reduce using rule 58
	';'            reduce using rule 58
	','            reduce using rule 58
	'<'            reduce using rule 58
	'>'            reduce using rule 58
	'=='           reduce using rule 58
	'/='           reduce using rule 58
	'>='           reduce using rule 58
	'<='           reduce using rule 58
	and            reduce using rule 58
	or             reduce using rule 58
	div            reduce using rule 58
	mod            reduce using rule 58
	with           reduce using rule 58
	do             reduce using rule 58
	end            reduce using rule 58
	if             reduce using rule 58
	then           reduce using rule 58
	while          reduce using rule 58
	for            reduce using rule 58
	repeat         reduce using rule 58
	return         reduce using rule 58
	times          reduce using rule 58
	by             reduce using rule 58
	to             reduce using rule 58


State 113

	ArgW -> ArgW ',' . ExprS                            (rule 50)

	'-'            shift, and enter state 60
	'('            shift, and enter state 61
	not            shift, and enter state 62
	true           shift, and enter state 63
	false          shift, and enter state 64
	integer        shift, and enter state 65
	floating       shift, and enter state 66
	str            shift, and enter state 67
	identifier     shift, and enter state 68

	ExprS          goto state 122
	Funcion        goto state 58
	Expr           goto state 59

State 114

	Expr -> Expr . or Expr                              (rule 60)
	Expr -> Expr . and Expr                             (rule 61)
	Expr -> Expr . '==' Expr                            (rule 62)
	Expr -> Expr . '/=' Expr                            (rule 63)
	Expr -> Expr . '<' Expr                             (rule 64)
	Expr -> Expr . '<=' Expr                            (rule 65)
	Expr -> Expr . '>' Expr                             (rule 66)
	Expr -> Expr . '>=' Expr                            (rule 67)
	Expr -> Expr . '+' Expr                             (rule 68)
	Expr -> Expr . '-' Expr                             (rule 69)
	Expr -> Expr . '*' Expr                             (rule 70)
	Expr -> Expr . '/' Expr                             (rule 71)
	Expr -> Expr . '%' Expr                             (rule 72)
	Expr -> Expr . div Expr                             (rule 73)
	Expr -> Expr . mod Expr                             (rule 74)
	Expr -> not Expr .                                  (rule 76)

	'%'            reduce using rule 76
	'/'            reduce using rule 76
	'*'            reduce using rule 76
	'-'            reduce using rule 76
	')'            reduce using rule 76
	'+'            reduce using rule 76
	';'            reduce using rule 76
	','            reduce using rule 76
	'<'            reduce using rule 76
	'>'            reduce using rule 76
	'=='           reduce using rule 76
	'/='           reduce using rule 76
	'>='           reduce using rule 76
	'<='           reduce using rule 76
	and            reduce using rule 76
	or             reduce using rule 76
	div            reduce using rule 76
	mod            reduce using rule 76
	with           reduce using rule 76
	do             reduce using rule 76
	end            reduce using rule 76
	if             reduce using rule 76
	then           reduce using rule 76
	while          reduce using rule 76
	for            reduce using rule 76
	repeat         reduce using rule 76
	return         reduce using rule 76
	times          reduce using rule 76
	by             reduce using rule 76
	to             reduce using rule 76


State 115

	Expr -> Expr . or Expr                              (rule 60)
	Expr -> Expr . and Expr                             (rule 61)
	Expr -> Expr . '==' Expr                            (rule 62)
	Expr -> Expr . '/=' Expr                            (rule 63)
	Expr -> Expr . '<' Expr                             (rule 64)
	Expr -> Expr . '<=' Expr                            (rule 65)
	Expr -> Expr . '>' Expr                             (rule 66)
	Expr -> Expr . '>=' Expr                            (rule 67)
	Expr -> Expr . '+' Expr                             (rule 68)
	Expr -> Expr . '-' Expr                             (rule 69)
	Expr -> Expr . '*' Expr                             (rule 70)
	Expr -> Expr . '/' Expr                             (rule 71)
	Expr -> Expr . '%' Expr                             (rule 72)
	Expr -> Expr . div Expr                             (rule 73)
	Expr -> Expr . mod Expr                             (rule 74)
	Expr -> '(' Expr . ')'                              (rule 75)

	'%'            shift, and enter state 91
	'/'            shift, and enter state 92
	'*'            shift, and enter state 93
	'-'            shift, and enter state 94
	')'            shift, and enter state 121
	'+'            shift, and enter state 95
	'<'            shift, and enter state 96
	'>'            shift, and enter state 97
	'=='           shift, and enter state 98
	'/='           shift, and enter state 99
	'>='           shift, and enter state 100
	'<='           shift, and enter state 101
	and            shift, and enter state 102
	or             shift, and enter state 103
	div            shift, and enter state 104
	mod            shift, and enter state 105


State 116

	Expr -> Expr . or Expr                              (rule 60)
	Expr -> Expr . and Expr                             (rule 61)
	Expr -> Expr . '==' Expr                            (rule 62)
	Expr -> Expr . '/=' Expr                            (rule 63)
	Expr -> Expr . '<' Expr                             (rule 64)
	Expr -> Expr . '<=' Expr                            (rule 65)
	Expr -> Expr . '>' Expr                             (rule 66)
	Expr -> Expr . '>=' Expr                            (rule 67)
	Expr -> Expr . '+' Expr                             (rule 68)
	Expr -> Expr . '-' Expr                             (rule 69)
	Expr -> Expr . '*' Expr                             (rule 70)
	Expr -> Expr . '/' Expr                             (rule 71)
	Expr -> Expr . '%' Expr                             (rule 72)
	Expr -> Expr . div Expr                             (rule 73)
	Expr -> Expr . mod Expr                             (rule 74)
	Expr -> '-' Expr .                                  (rule 77)

	'%'            reduce using rule 77
	'/'            reduce using rule 77
	'*'            reduce using rule 77
	'-'            reduce using rule 77
	')'            reduce using rule 77
	'+'            reduce using rule 77
	';'            reduce using rule 77
	','            reduce using rule 77
	'<'            reduce using rule 77
	'>'            reduce using rule 77
	'=='           reduce using rule 77
	'/='           reduce using rule 77
	'>='           reduce using rule 77
	'<='           reduce using rule 77
	and            reduce using rule 77
	or             reduce using rule 77
	div            reduce using rule 77
	mod            reduce using rule 77
	with           reduce using rule 77
	do             reduce using rule 77
	end            reduce using rule 77
	if             reduce using rule 77
	then           reduce using rule 77
	while          reduce using rule 77
	for            reduce using rule 77
	repeat         reduce using rule 77
	return         reduce using rule 77
	times          reduce using rule 77
	by             reduce using rule 77
	to             reduce using rule 77


State 117

	ListaI -> ListaI ',' identifier .                   (rule 47)

	';'            reduce using rule 47
	','            reduce using rule 47


State 118

	Asig -> identifier '=' Expr .                       (rule 48)
	Expr -> Expr . or Expr                              (rule 60)
	Expr -> Expr . and Expr                             (rule 61)
	Expr -> Expr . '==' Expr                            (rule 62)
	Expr -> Expr . '/=' Expr                            (rule 63)
	Expr -> Expr . '<' Expr                             (rule 64)
	Expr -> Expr . '<=' Expr                            (rule 65)
	Expr -> Expr . '>' Expr                             (rule 66)
	Expr -> Expr . '>=' Expr                            (rule 67)
	Expr -> Expr . '+' Expr                             (rule 68)
	Expr -> Expr . '-' Expr                             (rule 69)
	Expr -> Expr . '*' Expr                             (rule 70)
	Expr -> Expr . '/' Expr                             (rule 71)
	Expr -> Expr . '%' Expr                             (rule 72)
	Expr -> Expr . div Expr                             (rule 73)
	Expr -> Expr . mod Expr                             (rule 74)

	'%'            shift, and enter state 91
	'/'            shift, and enter state 92
	'*'            shift, and enter state 93
	'-'            shift, and enter state 94
	'+'            shift, and enter state 95
	';'            reduce using rule 48
	'<'            shift, and enter state 96
	'>'            shift, and enter state 97
	'=='           shift, and enter state 98
	'/='           shift, and enter state 99
	'>='           shift, and enter state 100
	'<='           shift, and enter state 101
	and            shift, and enter state 102
	or             shift, and enter state 103
	div            shift, and enter state 104
	mod            shift, and enter state 105


State 119

	Program -> program with ListaD do Bloque end . ';'    (rule 4)

	';'            shift, and enter state 120


State 120

	Program -> program with ListaD do Bloque end ';' .    (rule 4)

	%eof           reduce using rule 4


State 121

	Expr -> '(' Expr ')' .                              (rule 75)

	'%'            reduce using rule 75
	'/'            reduce using rule 75
	'*'            reduce using rule 75
	'-'            reduce using rule 75
	')'            reduce using rule 75
	'+'            reduce using rule 75
	';'            reduce using rule 75
	','            reduce using rule 75
	'<'            reduce using rule 75
	'>'            reduce using rule 75
	'=='           reduce using rule 75
	'/='           reduce using rule 75
	'>='           reduce using rule 75
	'<='           reduce using rule 75
	and            reduce using rule 75
	or             reduce using rule 75
	div            reduce using rule 75
	mod            reduce using rule 75
	with           reduce using rule 75
	do             reduce using rule 75
	end            reduce using rule 75
	if             reduce using rule 75
	then           reduce using rule 75
	while          reduce using rule 75
	for            reduce using rule 75
	repeat         reduce using rule 75
	return         reduce using rule 75
	times          reduce using rule 75
	by             reduce using rule 75
	to             reduce using rule 75


State 122

	ArgW -> ArgW ',' ExprS .                            (rule 50)

	';'            reduce using rule 50
	','            reduce using rule 50


State 123

	Funcion -> identifier '(' Args ')' .                (rule 59)

	'%'            reduce using rule 59
	'/'            reduce using rule 59
	'*'            reduce using rule 59
	'-'            reduce using rule 59
	')'            reduce using rule 59
	'+'            reduce using rule 59
	';'            reduce using rule 59
	','            reduce using rule 59
	'<'            reduce using rule 59
	'>'            reduce using rule 59
	'=='           reduce using rule 59
	'/='           reduce using rule 59
	'>='           reduce using rule 59
	'<='           reduce using rule 59
	and            reduce using rule 59
	or             reduce using rule 59
	div            reduce using rule 59
	mod            reduce using rule 59
	with           reduce using rule 59
	do             reduce using rule 59
	end            reduce using rule 59
	if             reduce using rule 59
	then           reduce using rule 59
	while          reduce using rule 59
	for            reduce using rule 59
	repeat         reduce using rule 59
	return         reduce using rule 59
	times          reduce using rule 59
	by             reduce using rule 59
	to             reduce using rule 59


State 124

	Args -> Args ',' . Expr                             (rule 57)

	'-'            shift, and enter state 60
	'('            shift, and enter state 61
	not            shift, and enter state 62
	true           shift, and enter state 63
	false          shift, and enter state 64
	integer        shift, and enter state 65
	floating       shift, and enter state 66
	identifier     shift, and enter state 68

	Funcion        goto state 58
	Expr           goto state 158

State 125

	BRep -> repeat Expr times Bloque . end ';'          (rule 12)
	Bloque -> Bloque . AnidS                            (rule 14)

	with           shift, and enter state 36
	end            shift, and enter state 157
	if             shift, and enter state 37
	while          shift, and enter state 38
	for            shift, and enter state 39
	repeat         shift, and enter state 40

	BWhile         goto state 22
	BFor           goto state 23
	BRep           goto state 24
	AnidS          goto state 79
	BIf            goto state 27
	BWith          goto state 28

State 126

	BFor -> for identifier from Expr . to Expr do Bloque end ';'    (rule 10)
	BFor -> for identifier from Expr . to Expr by Expr do Bloque end ';'    (rule 11)
	Expr -> Expr . or Expr                              (rule 60)
	Expr -> Expr . and Expr                             (rule 61)
	Expr -> Expr . '==' Expr                            (rule 62)
	Expr -> Expr . '/=' Expr                            (rule 63)
	Expr -> Expr . '<' Expr                             (rule 64)
	Expr -> Expr . '<=' Expr                            (rule 65)
	Expr -> Expr . '>' Expr                             (rule 66)
	Expr -> Expr . '>=' Expr                            (rule 67)
	Expr -> Expr . '+' Expr                             (rule 68)
	Expr -> Expr . '-' Expr                             (rule 69)
	Expr -> Expr . '*' Expr                             (rule 70)
	Expr -> Expr . '/' Expr                             (rule 71)
	Expr -> Expr . '%' Expr                             (rule 72)
	Expr -> Expr . div Expr                             (rule 73)
	Expr -> Expr . mod Expr                             (rule 74)

	'%'            shift, and enter state 91
	'/'            shift, and enter state 92
	'*'            shift, and enter state 93
	'-'            shift, and enter state 94
	'+'            shift, and enter state 95
	'<'            shift, and enter state 96
	'>'            shift, and enter state 97
	'=='           shift, and enter state 98
	'/='           shift, and enter state 99
	'>='           shift, and enter state 100
	'<='           shift, and enter state 101
	and            shift, and enter state 102
	or             shift, and enter state 103
	div            shift, and enter state 104
	mod            shift, and enter state 105
	to             shift, and enter state 156


State 127

	BWhile -> while Expr then Bloque . end ';'          (rule 9)
	Bloque -> Bloque . AnidS                            (rule 14)

	with           shift, and enter state 36
	end            shift, and enter state 155
	if             shift, and enter state 37
	while          shift, and enter state 38
	for            shift, and enter state 39
	repeat         shift, and enter state 40

	BWhile         goto state 22
	BFor           goto state 23
	BRep           goto state 24
	AnidS          goto state 79
	BIf            goto state 27
	BWith          goto state 28

State 128

	Bloque -> Bloque . AnidS                            (rule 14)
	BIf -> if Expr then Bloque . else Bloque end ';'    (rule 29)
	BIf -> if Expr then Bloque . end ';'                (rule 30)

	with           shift, and enter state 36
	end            shift, and enter state 153
	if             shift, and enter state 37
	else           shift, and enter state 154
	while          shift, and enter state 38
	for            shift, and enter state 39
	repeat         shift, and enter state 40

	BWhile         goto state 22
	BFor           goto state 23
	BRep           goto state 24
	AnidS          goto state 79
	BIf            goto state 27
	BWith          goto state 28

State 129

	Expr -> Expr . or Expr                              (rule 60)
	Expr -> Expr . and Expr                             (rule 61)
	Expr -> Expr . '==' Expr                            (rule 62)
	Expr -> Expr . '/=' Expr                            (rule 63)
	Expr -> Expr . '<' Expr                             (rule 64)
	Expr -> Expr . '<=' Expr                            (rule 65)
	Expr -> Expr . '>' Expr                             (rule 66)
	Expr -> Expr . '>=' Expr                            (rule 67)
	Expr -> Expr . '+' Expr                             (rule 68)
	Expr -> Expr . '-' Expr                             (rule 69)
	Expr -> Expr . '*' Expr                             (rule 70)
	Expr -> Expr . '/' Expr                             (rule 71)
	Expr -> Expr . '%' Expr                             (rule 72)
	Expr -> Expr . div Expr                             (rule 73)
	Expr -> Expr . mod Expr                             (rule 74)
	Expr -> Expr mod Expr .                             (rule 74)

	'%'            reduce using rule 74
	'/'            shift, and enter state 92
	'*'            shift, and enter state 93
	'-'            reduce using rule 74
	')'            reduce using rule 74
	'+'            reduce using rule 74
	';'            reduce using rule 74
	','            reduce using rule 74
	'<'            shift, and enter state 96
	'>'            shift, and enter state 97
	'=='           shift, and enter state 98
	'/='           shift, and enter state 99
	'>='           shift, and enter state 100
	'<='           shift, and enter state 101
	and            shift, and enter state 102
	or             reduce using rule 74
	div            shift, and enter state 104
	mod            reduce using rule 74
	with           reduce using rule 74
	do             reduce using rule 74
	end            reduce using rule 74
	if             reduce using rule 74
	then           reduce using rule 74
	while          reduce using rule 74
	for            reduce using rule 74
	repeat         reduce using rule 74
	return         reduce using rule 74
	times          reduce using rule 74
	by             reduce using rule 74
	to             reduce using rule 74


State 130

	Expr -> Expr . or Expr                              (rule 60)
	Expr -> Expr . and Expr                             (rule 61)
	Expr -> Expr . '==' Expr                            (rule 62)
	Expr -> Expr . '/=' Expr                            (rule 63)
	Expr -> Expr . '<' Expr                             (rule 64)
	Expr -> Expr . '<=' Expr                            (rule 65)
	Expr -> Expr . '>' Expr                             (rule 66)
	Expr -> Expr . '>=' Expr                            (rule 67)
	Expr -> Expr . '+' Expr                             (rule 68)
	Expr -> Expr . '-' Expr                             (rule 69)
	Expr -> Expr . '*' Expr                             (rule 70)
	Expr -> Expr . '/' Expr                             (rule 71)
	Expr -> Expr . '%' Expr                             (rule 72)
	Expr -> Expr . div Expr                             (rule 73)
	Expr -> Expr div Expr .                             (rule 73)
	Expr -> Expr . mod Expr                             (rule 74)

	'%'            reduce using rule 73
	'/'            reduce using rule 73
	'*'            reduce using rule 73
	'-'            reduce using rule 73
	')'            reduce using rule 73
	'+'            reduce using rule 73
	';'            reduce using rule 73
	','            reduce using rule 73
	'<'            shift, and enter state 96
	'>'            shift, and enter state 97
	'=='           shift, and enter state 98
	'/='           shift, and enter state 99
	'>='           shift, and enter state 100
	'<='           shift, and enter state 101
	and            reduce using rule 73
	or             reduce using rule 73
	div            reduce using rule 73
	mod            reduce using rule 73
	with           reduce using rule 73
	do             reduce using rule 73
	end            reduce using rule 73
	if             reduce using rule 73
	then           reduce using rule 73
	while          reduce using rule 73
	for            reduce using rule 73
	repeat         reduce using rule 73
	return         reduce using rule 73
	times          reduce using rule 73
	by             reduce using rule 73
	to             reduce using rule 73


State 131

	Expr -> Expr . or Expr                              (rule 60)
	Expr -> Expr or Expr .                              (rule 60)
	Expr -> Expr . and Expr                             (rule 61)
	Expr -> Expr . '==' Expr                            (rule 62)
	Expr -> Expr . '/=' Expr                            (rule 63)
	Expr -> Expr . '<' Expr                             (rule 64)
	Expr -> Expr . '<=' Expr                            (rule 65)
	Expr -> Expr . '>' Expr                             (rule 66)
	Expr -> Expr . '>=' Expr                            (rule 67)
	Expr -> Expr . '+' Expr                             (rule 68)
	Expr -> Expr . '-' Expr                             (rule 69)
	Expr -> Expr . '*' Expr                             (rule 70)
	Expr -> Expr . '/' Expr                             (rule 71)
	Expr -> Expr . '%' Expr                             (rule 72)
	Expr -> Expr . div Expr                             (rule 73)
	Expr -> Expr . mod Expr                             (rule 74)

	'%'            shift, and enter state 91
	'/'            shift, and enter state 92
	'*'            shift, and enter state 93
	'-'            reduce using rule 60
	')'            reduce using rule 60
	'+'            reduce using rule 60
	';'            reduce using rule 60
	','            reduce using rule 60
	'<'            shift, and enter state 96
	'>'            shift, and enter state 97
	'=='           shift, and enter state 98
	'/='           shift, and enter state 99
	'>='           shift, and enter state 100
	'<='           shift, and enter state 101
	and            shift, and enter state 102
	or             reduce using rule 60
	div            shift, and enter state 104
	mod            shift, and enter state 105
	with           reduce using rule 60
	do             reduce using rule 60
	end            reduce using rule 60
	if             reduce using rule 60
	then           reduce using rule 60
	while          reduce using rule 60
	for            reduce using rule 60
	repeat         reduce using rule 60
	return         reduce using rule 60
	times          reduce using rule 60
	by             reduce using rule 60
	to             reduce using rule 60


State 132

	Expr -> Expr . or Expr                              (rule 60)
	Expr -> Expr . and Expr                             (rule 61)
	Expr -> Expr and Expr .                             (rule 61)
	Expr -> Expr . '==' Expr                            (rule 62)
	Expr -> Expr . '/=' Expr                            (rule 63)
	Expr -> Expr . '<' Expr                             (rule 64)
	Expr -> Expr . '<=' Expr                            (rule 65)
	Expr -> Expr . '>' Expr                             (rule 66)
	Expr -> Expr . '>=' Expr                            (rule 67)
	Expr -> Expr . '+' Expr                             (rule 68)
	Expr -> Expr . '-' Expr                             (rule 69)
	Expr -> Expr . '*' Expr                             (rule 70)
	Expr -> Expr . '/' Expr                             (rule 71)
	Expr -> Expr . '%' Expr                             (rule 72)
	Expr -> Expr . div Expr                             (rule 73)
	Expr -> Expr . mod Expr                             (rule 74)

	'%'            reduce using rule 61
	'/'            reduce using rule 61
	'*'            reduce using rule 61
	'-'            reduce using rule 61
	')'            reduce using rule 61
	'+'            reduce using rule 61
	';'            reduce using rule 61
	','            reduce using rule 61
	'<'            shift, and enter state 96
	'>'            shift, and enter state 97
	'=='           shift, and enter state 98
	'/='           shift, and enter state 99
	'>='           shift, and enter state 100
	'<='           shift, and enter state 101
	and            reduce using rule 61
	or             reduce using rule 61
	div            reduce using rule 61
	mod            reduce using rule 61
	with           reduce using rule 61
	do             reduce using rule 61
	end            reduce using rule 61
	if             reduce using rule 61
	then           reduce using rule 61
	while          reduce using rule 61
	for            reduce using rule 61
	repeat         reduce using rule 61
	return         reduce using rule 61
	times          reduce using rule 61
	by             reduce using rule 61
	to             reduce using rule 61


State 133

	Expr -> Expr . or Expr                              (rule 60)
	Expr -> Expr . and Expr                             (rule 61)
	Expr -> Expr . '==' Expr                            (rule 62)
	Expr -> Expr . '/=' Expr                            (rule 63)
	Expr -> Expr . '<' Expr                             (rule 64)
	Expr -> Expr . '<=' Expr                            (rule 65)
	Expr -> Expr '<=' Expr .                            (rule 65)
	Expr -> Expr . '>' Expr                             (rule 66)
	Expr -> Expr . '>=' Expr                            (rule 67)
	Expr -> Expr . '+' Expr                             (rule 68)
	Expr -> Expr . '-' Expr                             (rule 69)
	Expr -> Expr . '*' Expr                             (rule 70)
	Expr -> Expr . '/' Expr                             (rule 71)
	Expr -> Expr . '%' Expr                             (rule 72)
	Expr -> Expr . div Expr                             (rule 73)
	Expr -> Expr . mod Expr                             (rule 74)

	'%'            reduce using rule 65
	'/'            reduce using rule 65
	'*'            reduce using rule 65
	'-'            reduce using rule 65
	')'            reduce using rule 65
	'+'            reduce using rule 65
	';'            reduce using rule 65
	','            reduce using rule 65
	'<'            fail
	'>'            fail
	'=='           shift, and enter state 98
	'/='           shift, and enter state 99
	'>='           fail
	'<='           fail
	and            reduce using rule 65
	or             reduce using rule 65
	div            reduce using rule 65
	mod            reduce using rule 65
	with           reduce using rule 65
	do             reduce using rule 65
	end            reduce using rule 65
	if             reduce using rule 65
	then           reduce using rule 65
	while          reduce using rule 65
	for            reduce using rule 65
	repeat         reduce using rule 65
	return         reduce using rule 65
	times          reduce using rule 65
	by             reduce using rule 65
	to             reduce using rule 65


State 134

	Expr -> Expr . or Expr                              (rule 60)
	Expr -> Expr . and Expr                             (rule 61)
	Expr -> Expr . '==' Expr                            (rule 62)
	Expr -> Expr . '/=' Expr                            (rule 63)
	Expr -> Expr . '<' Expr                             (rule 64)
	Expr -> Expr . '<=' Expr                            (rule 65)
	Expr -> Expr . '>' Expr                             (rule 66)
	Expr -> Expr . '>=' Expr                            (rule 67)
	Expr -> Expr '>=' Expr .                            (rule 67)
	Expr -> Expr . '+' Expr                             (rule 68)
	Expr -> Expr . '-' Expr                             (rule 69)
	Expr -> Expr . '*' Expr                             (rule 70)
	Expr -> Expr . '/' Expr                             (rule 71)
	Expr -> Expr . '%' Expr                             (rule 72)
	Expr -> Expr . div Expr                             (rule 73)
	Expr -> Expr . mod Expr                             (rule 74)

	'%'            reduce using rule 67
	'/'            reduce using rule 67
	'*'            reduce using rule 67
	'-'            reduce using rule 67
	')'            reduce using rule 67
	'+'            reduce using rule 67
	';'            reduce using rule 67
	','            reduce using rule 67
	'<'            fail
	'>'            fail
	'=='           shift, and enter state 98
	'/='           shift, and enter state 99
	'>='           fail
	'<='           fail
	and            reduce using rule 67
	or             reduce using rule 67
	div            reduce using rule 67
	mod            reduce using rule 67
	with           reduce using rule 67
	do             reduce using rule 67
	end            reduce using rule 67
	if             reduce using rule 67
	then           reduce using rule 67
	while          reduce using rule 67
	for            reduce using rule 67
	repeat         reduce using rule 67
	return         reduce using rule 67
	times          reduce using rule 67
	by             reduce using rule 67
	to             reduce using rule 67


State 135

	Expr -> Expr . or Expr                              (rule 60)
	Expr -> Expr . and Expr                             (rule 61)
	Expr -> Expr . '==' Expr                            (rule 62)
	Expr -> Expr . '/=' Expr                            (rule 63)
	Expr -> Expr '/=' Expr .                            (rule 63)
	Expr -> Expr . '<' Expr                             (rule 64)
	Expr -> Expr . '<=' Expr                            (rule 65)
	Expr -> Expr . '>' Expr                             (rule 66)
	Expr -> Expr . '>=' Expr                            (rule 67)
	Expr -> Expr . '+' Expr                             (rule 68)
	Expr -> Expr . '-' Expr                             (rule 69)
	Expr -> Expr . '*' Expr                             (rule 70)
	Expr -> Expr . '/' Expr                             (rule 71)
	Expr -> Expr . '%' Expr                             (rule 72)
	Expr -> Expr . div Expr                             (rule 73)
	Expr -> Expr . mod Expr                             (rule 74)

	'%'            reduce using rule 63
	'/'            reduce using rule 63
	'*'            reduce using rule 63
	'-'            reduce using rule 63
	')'            reduce using rule 63
	'+'            reduce using rule 63
	';'            reduce using rule 63
	','            reduce using rule 63
	'<'            reduce using rule 63
	'>'            reduce using rule 63
	'=='           fail
	'/='           fail
	'>='           reduce using rule 63
	'<='           reduce using rule 63
	and            reduce using rule 63
	or             reduce using rule 63
	div            reduce using rule 63
	mod            reduce using rule 63
	with           reduce using rule 63
	do             reduce using rule 63
	end            reduce using rule 63
	if             reduce using rule 63
	then           reduce using rule 63
	while          reduce using rule 63
	for            reduce using rule 63
	repeat         reduce using rule 63
	return         reduce using rule 63
	times          reduce using rule 63
	by             reduce using rule 63
	to             reduce using rule 63


State 136

	Expr -> Expr . or Expr                              (rule 60)
	Expr -> Expr . and Expr                             (rule 61)
	Expr -> Expr . '==' Expr                            (rule 62)
	Expr -> Expr '==' Expr .                            (rule 62)
	Expr -> Expr . '/=' Expr                            (rule 63)
	Expr -> Expr . '<' Expr                             (rule 64)
	Expr -> Expr . '<=' Expr                            (rule 65)
	Expr -> Expr . '>' Expr                             (rule 66)
	Expr -> Expr . '>=' Expr                            (rule 67)
	Expr -> Expr . '+' Expr                             (rule 68)
	Expr -> Expr . '-' Expr                             (rule 69)
	Expr -> Expr . '*' Expr                             (rule 70)
	Expr -> Expr . '/' Expr                             (rule 71)
	Expr -> Expr . '%' Expr                             (rule 72)
	Expr -> Expr . div Expr                             (rule 73)
	Expr -> Expr . mod Expr                             (rule 74)

	'%'            reduce using rule 62
	'/'            reduce using rule 62
	'*'            reduce using rule 62
	'-'            reduce using rule 62
	')'            reduce using rule 62
	'+'            reduce using rule 62
	';'            reduce using rule 62
	','            reduce using rule 62
	'<'            reduce using rule 62
	'>'            reduce using rule 62
	'=='           fail
	'/='           fail
	'>='           reduce using rule 62
	'<='           reduce using rule 62
	and            reduce using rule 62
	or             reduce using rule 62
	div            reduce using rule 62
	mod            reduce using rule 62
	with           reduce using rule 62
	do             reduce using rule 62
	end            reduce using rule 62
	if             reduce using rule 62
	then           reduce using rule 62
	while          reduce using rule 62
	for            reduce using rule 62
	repeat         reduce using rule 62
	return         reduce using rule 62
	times          reduce using rule 62
	by             reduce using rule 62
	to             reduce using rule 62


State 137

	Expr -> Expr . or Expr                              (rule 60)
	Expr -> Expr . and Expr                             (rule 61)
	Expr -> Expr . '==' Expr                            (rule 62)
	Expr -> Expr . '/=' Expr                            (rule 63)
	Expr -> Expr . '<' Expr                             (rule 64)
	Expr -> Expr . '<=' Expr                            (rule 65)
	Expr -> Expr . '>' Expr                             (rule 66)
	Expr -> Expr '>' Expr .                             (rule 66)
	Expr -> Expr . '>=' Expr                            (rule 67)
	Expr -> Expr . '+' Expr                             (rule 68)
	Expr -> Expr . '-' Expr                             (rule 69)
	Expr -> Expr . '*' Expr                             (rule 70)
	Expr -> Expr . '/' Expr                             (rule 71)
	Expr -> Expr . '%' Expr                             (rule 72)
	Expr -> Expr . div Expr                             (rule 73)
	Expr -> Expr . mod Expr                             (rule 74)

	'%'            reduce using rule 66
	'/'            reduce using rule 66
	'*'            reduce using rule 66
	'-'            reduce using rule 66
	')'            reduce using rule 66
	'+'            reduce using rule 66
	';'            reduce using rule 66
	','            reduce using rule 66
	'<'            fail
	'>'            fail
	'=='           shift, and enter state 98
	'/='           shift, and enter state 99
	'>='           fail
	'<='           fail
	and            reduce using rule 66
	or             reduce using rule 66
	div            reduce using rule 66
	mod            reduce using rule 66
	with           reduce using rule 66
	do             reduce using rule 66
	end            reduce using rule 66
	if             reduce using rule 66
	then           reduce using rule 66
	while          reduce using rule 66
	for            reduce using rule 66
	repeat         reduce using rule 66
	return         reduce using rule 66
	times          reduce using rule 66
	by             reduce using rule 66
	to             reduce using rule 66


State 138

	Expr -> Expr . or Expr                              (rule 60)
	Expr -> Expr . and Expr                             (rule 61)
	Expr -> Expr . '==' Expr                            (rule 62)
	Expr -> Expr . '/=' Expr                            (rule 63)
	Expr -> Expr . '<' Expr                             (rule 64)
	Expr -> Expr '<' Expr .                             (rule 64)
	Expr -> Expr . '<=' Expr                            (rule 65)
	Expr -> Expr . '>' Expr                             (rule 66)
	Expr -> Expr . '>=' Expr                            (rule 67)
	Expr -> Expr . '+' Expr                             (rule 68)
	Expr -> Expr . '-' Expr                             (rule 69)
	Expr -> Expr . '*' Expr                             (rule 70)
	Expr -> Expr . '/' Expr                             (rule 71)
	Expr -> Expr . '%' Expr                             (rule 72)
	Expr -> Expr . div Expr                             (rule 73)
	Expr -> Expr . mod Expr                             (rule 74)

	'%'            reduce using rule 64
	'/'            reduce using rule 64
	'*'            reduce using rule 64
	'-'            reduce using rule 64
	')'            reduce using rule 64
	'+'            reduce using rule 64
	';'            reduce using rule 64
	','            reduce using rule 64
	'<'            fail
	'>'            fail
	'=='           shift, and enter state 98
	'/='           shift, and enter state 99
	'>='           fail
	'<='           fail
	and            reduce using rule 64
	or             reduce using rule 64
	div            reduce using rule 64
	mod            reduce using rule 64
	with           reduce using rule 64
	do             reduce using rule 64
	end            reduce using rule 64
	if             reduce using rule 64
	then           reduce using rule 64
	while          reduce using rule 64
	for            reduce using rule 64
	repeat         reduce using rule 64
	return         reduce using rule 64
	times          reduce using rule 64
	by             reduce using rule 64
	to             reduce using rule 64


State 139

	Expr -> Expr . or Expr                              (rule 60)
	Expr -> Expr . and Expr                             (rule 61)
	Expr -> Expr . '==' Expr                            (rule 62)
	Expr -> Expr . '/=' Expr                            (rule 63)
	Expr -> Expr . '<' Expr                             (rule 64)
	Expr -> Expr . '<=' Expr                            (rule 65)
	Expr -> Expr . '>' Expr                             (rule 66)
	Expr -> Expr . '>=' Expr                            (rule 67)
	Expr -> Expr . '+' Expr                             (rule 68)
	Expr -> Expr '+' Expr .                             (rule 68)
	Expr -> Expr . '-' Expr                             (rule 69)
	Expr -> Expr . '*' Expr                             (rule 70)
	Expr -> Expr . '/' Expr                             (rule 71)
	Expr -> Expr . '%' Expr                             (rule 72)
	Expr -> Expr . div Expr                             (rule 73)
	Expr -> Expr . mod Expr                             (rule 74)

	'%'            shift, and enter state 91
	'/'            shift, and enter state 92
	'*'            shift, and enter state 93
	'-'            reduce using rule 68
	')'            reduce using rule 68
	'+'            reduce using rule 68
	';'            reduce using rule 68
	','            reduce using rule 68
	'<'            shift, and enter state 96
	'>'            shift, and enter state 97
	'=='           shift, and enter state 98
	'/='           shift, and enter state 99
	'>='           shift, and enter state 100
	'<='           shift, and enter state 101
	and            shift, and enter state 102
	or             reduce using rule 68
	div            shift, and enter state 104
	mod            shift, and enter state 105
	with           reduce using rule 68
	do             reduce using rule 68
	end            reduce using rule 68
	if             reduce using rule 68
	then           reduce using rule 68
	while          reduce using rule 68
	for            reduce using rule 68
	repeat         reduce using rule 68
	return         reduce using rule 68
	times          reduce using rule 68
	by             reduce using rule 68
	to             reduce using rule 68


State 140

	Expr -> Expr . or Expr                              (rule 60)
	Expr -> Expr . and Expr                             (rule 61)
	Expr -> Expr . '==' Expr                            (rule 62)
	Expr -> Expr . '/=' Expr                            (rule 63)
	Expr -> Expr . '<' Expr                             (rule 64)
	Expr -> Expr . '<=' Expr                            (rule 65)
	Expr -> Expr . '>' Expr                             (rule 66)
	Expr -> Expr . '>=' Expr                            (rule 67)
	Expr -> Expr . '+' Expr                             (rule 68)
	Expr -> Expr . '-' Expr                             (rule 69)
	Expr -> Expr '-' Expr .                             (rule 69)
	Expr -> Expr . '*' Expr                             (rule 70)
	Expr -> Expr . '/' Expr                             (rule 71)
	Expr -> Expr . '%' Expr                             (rule 72)
	Expr -> Expr . div Expr                             (rule 73)
	Expr -> Expr . mod Expr                             (rule 74)

	'%'            shift, and enter state 91
	'/'            shift, and enter state 92
	'*'            shift, and enter state 93
	'-'            reduce using rule 69
	')'            reduce using rule 69
	'+'            reduce using rule 69
	';'            reduce using rule 69
	','            reduce using rule 69
	'<'            shift, and enter state 96
	'>'            shift, and enter state 97
	'=='           shift, and enter state 98
	'/='           shift, and enter state 99
	'>='           shift, and enter state 100
	'<='           shift, and enter state 101
	and            shift, and enter state 102
	or             reduce using rule 69
	div            shift, and enter state 104
	mod            shift, and enter state 105
	with           reduce using rule 69
	do             reduce using rule 69
	end            reduce using rule 69
	if             reduce using rule 69
	then           reduce using rule 69
	while          reduce using rule 69
	for            reduce using rule 69
	repeat         reduce using rule 69
	return         reduce using rule 69
	times          reduce using rule 69
	by             reduce using rule 69
	to             reduce using rule 69


State 141

	Expr -> Expr . or Expr                              (rule 60)
	Expr -> Expr . and Expr                             (rule 61)
	Expr -> Expr . '==' Expr                            (rule 62)
	Expr -> Expr . '/=' Expr                            (rule 63)
	Expr -> Expr . '<' Expr                             (rule 64)
	Expr -> Expr . '<=' Expr                            (rule 65)
	Expr -> Expr . '>' Expr                             (rule 66)
	Expr -> Expr . '>=' Expr                            (rule 67)
	Expr -> Expr . '+' Expr                             (rule 68)
	Expr -> Expr . '-' Expr                             (rule 69)
	Expr -> Expr . '*' Expr                             (rule 70)
	Expr -> Expr '*' Expr .                             (rule 70)
	Expr -> Expr . '/' Expr                             (rule 71)
	Expr -> Expr . '%' Expr                             (rule 72)
	Expr -> Expr . div Expr                             (rule 73)
	Expr -> Expr . mod Expr                             (rule 74)

	'%'            reduce using rule 70
	'/'            reduce using rule 70
	'*'            reduce using rule 70
	'-'            reduce using rule 70
	')'            reduce using rule 70
	'+'            reduce using rule 70
	';'            reduce using rule 70
	','            reduce using rule 70
	'<'            shift, and enter state 96
	'>'            shift, and enter state 97
	'=='           shift, and enter state 98
	'/='           shift, and enter state 99
	'>='           shift, and enter state 100
	'<='           shift, and enter state 101
	and            reduce using rule 70
	or             reduce using rule 70
	div            reduce using rule 70
	mod            reduce using rule 70
	with           reduce using rule 70
	do             reduce using rule 70
	end            reduce using rule 70
	if             reduce using rule 70
	then           reduce using rule 70
	while          reduce using rule 70
	for            reduce using rule 70
	repeat         reduce using rule 70
	return         reduce using rule 70
	times          reduce using rule 70
	by             reduce using rule 70
	to             reduce using rule 70


State 142

	Expr -> Expr . or Expr                              (rule 60)
	Expr -> Expr . and Expr                             (rule 61)
	Expr -> Expr . '==' Expr                            (rule 62)
	Expr -> Expr . '/=' Expr                            (rule 63)
	Expr -> Expr . '<' Expr                             (rule 64)
	Expr -> Expr . '<=' Expr                            (rule 65)
	Expr -> Expr . '>' Expr                             (rule 66)
	Expr -> Expr . '>=' Expr                            (rule 67)
	Expr -> Expr . '+' Expr                             (rule 68)
	Expr -> Expr . '-' Expr                             (rule 69)
	Expr -> Expr . '*' Expr                             (rule 70)
	Expr -> Expr . '/' Expr                             (rule 71)
	Expr -> Expr '/' Expr .                             (rule 71)
	Expr -> Expr . '%' Expr                             (rule 72)
	Expr -> Expr . div Expr                             (rule 73)
	Expr -> Expr . mod Expr                             (rule 74)

	'%'            reduce using rule 71
	'/'            reduce using rule 71
	'*'            reduce using rule 71
	'-'            reduce using rule 71
	')'            reduce using rule 71
	'+'            reduce using rule 71
	';'            reduce using rule 71
	','            reduce using rule 71
	'<'            shift, and enter state 96
	'>'            shift, and enter state 97
	'=='           shift, and enter state 98
	'/='           shift, and enter state 99
	'>='           shift, and enter state 100
	'<='           shift, and enter state 101
	and            reduce using rule 71
	or             reduce using rule 71
	div            reduce using rule 71
	mod            reduce using rule 71
	with           reduce using rule 71
	do             reduce using rule 71
	end            reduce using rule 71
	if             reduce using rule 71
	then           reduce using rule 71
	while          reduce using rule 71
	for            reduce using rule 71
	repeat         reduce using rule 71
	return         reduce using rule 71
	times          reduce using rule 71
	by             reduce using rule 71
	to             reduce using rule 71


State 143

	Expr -> Expr . or Expr                              (rule 60)
	Expr -> Expr . and Expr                             (rule 61)
	Expr -> Expr . '==' Expr                            (rule 62)
	Expr -> Expr . '/=' Expr                            (rule 63)
	Expr -> Expr . '<' Expr                             (rule 64)
	Expr -> Expr . '<=' Expr                            (rule 65)
	Expr -> Expr . '>' Expr                             (rule 66)
	Expr -> Expr . '>=' Expr                            (rule 67)
	Expr -> Expr . '+' Expr                             (rule 68)
	Expr -> Expr . '-' Expr                             (rule 69)
	Expr -> Expr . '*' Expr                             (rule 70)
	Expr -> Expr . '/' Expr                             (rule 71)
	Expr -> Expr . '%' Expr                             (rule 72)
	Expr -> Expr '%' Expr .                             (rule 72)
	Expr -> Expr . div Expr                             (rule 73)
	Expr -> Expr . mod Expr                             (rule 74)

	'%'            reduce using rule 72
	'/'            shift, and enter state 92
	'*'            shift, and enter state 93
	'-'            reduce using rule 72
	')'            reduce using rule 72
	'+'            reduce using rule 72
	';'            reduce using rule 72
	','            reduce using rule 72
	'<'            shift, and enter state 96
	'>'            shift, and enter state 97
	'=='           shift, and enter state 98
	'/='           shift, and enter state 99
	'>='           shift, and enter state 100
	'<='           shift, and enter state 101
	and            shift, and enter state 102
	or             reduce using rule 72
	div            shift, and enter state 104
	mod            reduce using rule 72
	with           reduce using rule 72
	do             reduce using rule 72
	end            reduce using rule 72
	if             reduce using rule 72
	then           reduce using rule 72
	while          reduce using rule 72
	for            reduce using rule 72
	repeat         reduce using rule 72
	return         reduce using rule 72
	times          reduce using rule 72
	by             reduce using rule 72
	to             reduce using rule 72


State 144

	Bloque -> Bloque . AnidS                            (rule 14)
	BWith -> with ListaD do Bloque . end ';'            (rule 32)

	with           shift, and enter state 36
	end            shift, and enter state 152
	if             shift, and enter state 37
	while          shift, and enter state 38
	for            shift, and enter state 39
	repeat         shift, and enter state 40

	BWhile         goto state 22
	BFor           goto state 23
	BRep           goto state 24
	AnidS          goto state 79
	BIf            goto state 27
	BWith          goto state 28

State 145

	BWith -> with do Bloque end . ';'                   (rule 31)

	';'            shift, and enter state 151


State 146

	ParamD -> ParamD ',' Tipo identifier .              (rule 24)

	')'            reduce using rule 24
	','            reduce using rule 24


State 147

	Bloque -> Bloque . AnidS                            (rule 14)
	FunDec -> func identifier '(' Param ')' begin Bloque . end ';'    (rule 25)

	with           shift, and enter state 36
	end            shift, and enter state 150
	if             shift, and enter state 37
	while          shift, and enter state 38
	for            shift, and enter state 39
	repeat         shift, and enter state 40

	BWhile         goto state 22
	BFor           goto state 23
	BRep           goto state 24
	AnidS          goto state 79
	BIf            goto state 27
	BWith          goto state 28

State 148

	FunDec -> func identifier '(' Param ')' '->' Tipo . begin BloqueR end ';'    (rule 26)

	begin          shift, and enter state 149


State 149

	FunDec -> func identifier '(' Param ')' '->' Tipo begin . BloqueR end ';'    (rule 26)

	with           shift, and enter state 36
	if             shift, and enter state 37
	while          shift, and enter state 38
	for            shift, and enter state 39
	repeat         shift, and enter state 40
	return         shift, and enter state 169

	BloqueR        goto state 166
	AnidR          goto state 167
	BWhile         goto state 22
	BFor           goto state 23
	BRep           goto state 24
	AnidS          goto state 168
	BIf            goto state 27
	BWith          goto state 28

State 150

	FunDec -> func identifier '(' Param ')' begin Bloque end . ';'    (rule 25)

	';'            shift, and enter state 165


State 151

	BWith -> with do Bloque end ';' .                   (rule 31)

	with           reduce using rule 31
	end            reduce using rule 31
	if             reduce using rule 31
	else           reduce using rule 31
	while          reduce using rule 31
	for            reduce using rule 31
	repeat         reduce using rule 31
	return         reduce using rule 31


State 152

	BWith -> with ListaD do Bloque end . ';'            (rule 32)

	';'            shift, and enter state 164


State 153

	BIf -> if Expr then Bloque end . ';'                (rule 30)

	';'            shift, and enter state 163


State 154

	BIf -> if Expr then Bloque else . Bloque end ';'    (rule 29)

	with           shift, and enter state 36
	if             shift, and enter state 37
	while          shift, and enter state 38
	for            shift, and enter state 39
	repeat         shift, and enter state 40
	identifier     shift, and enter state 41
	writeln        shift, and enter state 42
	write          shift, and enter state 43
	read           shift, and enter state 44

	BWhile         goto state 22
	BFor           goto state 23
	BRep           goto state 24
	Bloque         goto state 162
	AnidS          goto state 26
	BIf            goto state 27
	BWith          goto state 28
	ListaIn        goto state 29
	Ins            goto state 30
	Asig           goto state 31
	Leer           goto state 32
	Escribir       goto state 33
	EscribirLn     goto state 34
	Funcion        goto state 35

State 155

	BWhile -> while Expr then Bloque end . ';'          (rule 9)

	';'            shift, and enter state 161


State 156

	BFor -> for identifier from Expr to . Expr do Bloque end ';'    (rule 10)
	BFor -> for identifier from Expr to . Expr by Expr do Bloque end ';'    (rule 11)

	'-'            shift, and enter state 60
	'('            shift, and enter state 61
	not            shift, and enter state 62
	true           shift, and enter state 63
	false          shift, and enter state 64
	integer        shift, and enter state 65
	floating       shift, and enter state 66
	identifier     shift, and enter state 68

	Funcion        goto state 58
	Expr           goto state 160

State 157

	BRep -> repeat Expr times Bloque end . ';'          (rule 12)

	';'            shift, and enter state 159


State 158

	Args -> Args ',' Expr .                             (rule 57)
	Expr -> Expr . or Expr                              (rule 60)
	Expr -> Expr . and Expr                             (rule 61)
	Expr -> Expr . '==' Expr                            (rule 62)
	Expr -> Expr . '/=' Expr                            (rule 63)
	Expr -> Expr . '<' Expr                             (rule 64)
	Expr -> Expr . '<=' Expr                            (rule 65)
	Expr -> Expr . '>' Expr                             (rule 66)
	Expr -> Expr . '>=' Expr                            (rule 67)
	Expr -> Expr . '+' Expr                             (rule 68)
	Expr -> Expr . '-' Expr                             (rule 69)
	Expr -> Expr . '*' Expr                             (rule 70)
	Expr -> Expr . '/' Expr                             (rule 71)
	Expr -> Expr . '%' Expr                             (rule 72)
	Expr -> Expr . div Expr                             (rule 73)
	Expr -> Expr . mod Expr                             (rule 74)

	'%'            shift, and enter state 91
	'/'            shift, and enter state 92
	'*'            shift, and enter state 93
	'-'            shift, and enter state 94
	')'            reduce using rule 57
	'+'            shift, and enter state 95
	','            reduce using rule 57
	'<'            shift, and enter state 96
	'>'            shift, and enter state 97
	'=='           shift, and enter state 98
	'/='           shift, and enter state 99
	'>='           shift, and enter state 100
	'<='           shift, and enter state 101
	and            shift, and enter state 102
	or             shift, and enter state 103
	div            shift, and enter state 104
	mod            shift, and enter state 105


State 159

	BRep -> repeat Expr times Bloque end ';' .          (rule 12)

	with           reduce using rule 12
	end            reduce using rule 12
	if             reduce using rule 12
	else           reduce using rule 12
	while          reduce using rule 12
	for            reduce using rule 12
	repeat         reduce using rule 12
	return         reduce using rule 12


State 160

	BFor -> for identifier from Expr to Expr . do Bloque end ';'    (rule 10)
	BFor -> for identifier from Expr to Expr . by Expr do Bloque end ';'    (rule 11)
	Expr -> Expr . or Expr                              (rule 60)
	Expr -> Expr . and Expr                             (rule 61)
	Expr -> Expr . '==' Expr                            (rule 62)
	Expr -> Expr . '/=' Expr                            (rule 63)
	Expr -> Expr . '<' Expr                             (rule 64)
	Expr -> Expr . '<=' Expr                            (rule 65)
	Expr -> Expr . '>' Expr                             (rule 66)
	Expr -> Expr . '>=' Expr                            (rule 67)
	Expr -> Expr . '+' Expr                             (rule 68)
	Expr -> Expr . '-' Expr                             (rule 69)
	Expr -> Expr . '*' Expr                             (rule 70)
	Expr -> Expr . '/' Expr                             (rule 71)
	Expr -> Expr . '%' Expr                             (rule 72)
	Expr -> Expr . div Expr                             (rule 73)
	Expr -> Expr . mod Expr                             (rule 74)

	'%'            shift, and enter state 91
	'/'            shift, and enter state 92
	'*'            shift, and enter state 93
	'-'            shift, and enter state 94
	'+'            shift, and enter state 95
	'<'            shift, and enter state 96
	'>'            shift, and enter state 97
	'=='           shift, and enter state 98
	'/='           shift, and enter state 99
	'>='           shift, and enter state 100
	'<='           shift, and enter state 101
	and            shift, and enter state 102
	or             shift, and enter state 103
	div            shift, and enter state 104
	mod            shift, and enter state 105
	do             shift, and enter state 174
	by             shift, and enter state 175


State 161

	BWhile -> while Expr then Bloque end ';' .          (rule 9)

	with           reduce using rule 9
	end            reduce using rule 9
	if             reduce using rule 9
	else           reduce using rule 9
	while          reduce using rule 9
	for            reduce using rule 9
	repeat         reduce using rule 9
	return         reduce using rule 9


State 162

	Bloque -> Bloque . AnidS                            (rule 14)
	BIf -> if Expr then Bloque else Bloque . end ';'    (rule 29)

	with           shift, and enter state 36
	end            shift, and enter state 173
	if             shift, and enter state 37
	while          shift, and enter state 38
	for            shift, and enter state 39
	repeat         shift, and enter state 40

	BWhile         goto state 22
	BFor           goto state 23
	BRep           goto state 24
	AnidS          goto state 79
	BIf            goto state 27
	BWith          goto state 28

State 163

	BIf -> if Expr then Bloque end ';' .                (rule 30)

	with           reduce using rule 30
	end            reduce using rule 30
	if             reduce using rule 30
	else           reduce using rule 30
	while          reduce using rule 30
	for            reduce using rule 30
	repeat         reduce using rule 30
	return         reduce using rule 30


State 164

	BWith -> with ListaD do Bloque end ';' .            (rule 32)

	with           reduce using rule 32
	end            reduce using rule 32
	if             reduce using rule 32
	else           reduce using rule 32
	while          reduce using rule 32
	for            reduce using rule 32
	repeat         reduce using rule 32
	return         reduce using rule 32


State 165

	FunDec -> func identifier '(' Param ')' begin Bloque end ';' .    (rule 25)

	func           reduce using rule 25
	program        reduce using rule 25


State 166

	BloqueR -> BloqueR . AnidR                          (rule 6)
	FunDec -> func identifier '(' Param ')' '->' Tipo begin BloqueR . end ';'    (rule 26)

	with           shift, and enter state 36
	end            shift, and enter state 172
	if             shift, and enter state 37
	while          shift, and enter state 38
	for            shift, and enter state 39
	repeat         shift, and enter state 40
	return         shift, and enter state 169

	AnidR          goto state 171
	BWhile         goto state 22
	BFor           goto state 23
	BRep           goto state 24
	AnidS          goto state 168
	BIf            goto state 27
	BWith          goto state 28

State 167

	BloqueR -> AnidR .                                  (rule 5)

	with           reduce using rule 5
	end            reduce using rule 5
	if             reduce using rule 5
	while          reduce using rule 5
	for            reduce using rule 5
	repeat         reduce using rule 5
	return         reduce using rule 5


State 168

	AnidR -> AnidS .                                    (rule 7)

	with           reduce using rule 7
	end            reduce using rule 7
	if             reduce using rule 7
	while          reduce using rule 7
	for            reduce using rule 7
	repeat         reduce using rule 7
	return         reduce using rule 7


State 169

	AnidR -> return . Expr                              (rule 8)

	'-'            shift, and enter state 60
	'('            shift, and enter state 61
	not            shift, and enter state 62
	true           shift, and enter state 63
	false          shift, and enter state 64
	integer        shift, and enter state 65
	floating       shift, and enter state 66
	identifier     shift, and enter state 68

	Funcion        goto state 58
	Expr           goto state 170

State 170

	AnidR -> return Expr .                              (rule 8)
	Expr -> Expr . or Expr                              (rule 60)
	Expr -> Expr . and Expr                             (rule 61)
	Expr -> Expr . '==' Expr                            (rule 62)
	Expr -> Expr . '/=' Expr                            (rule 63)
	Expr -> Expr . '<' Expr                             (rule 64)
	Expr -> Expr . '<=' Expr                            (rule 65)
	Expr -> Expr . '>' Expr                             (rule 66)
	Expr -> Expr . '>=' Expr                            (rule 67)
	Expr -> Expr . '+' Expr                             (rule 68)
	Expr -> Expr . '-' Expr                             (rule 69)
	Expr -> Expr . '*' Expr                             (rule 70)
	Expr -> Expr . '/' Expr                             (rule 71)
	Expr -> Expr . '%' Expr                             (rule 72)
	Expr -> Expr . div Expr                             (rule 73)
	Expr -> Expr . mod Expr                             (rule 74)

	'%'            shift, and enter state 91
	'/'            shift, and enter state 92
	'*'            shift, and enter state 93
	'-'            shift, and enter state 94
	'+'            shift, and enter state 95
	'<'            shift, and enter state 96
	'>'            shift, and enter state 97
	'=='           shift, and enter state 98
	'/='           shift, and enter state 99
	'>='           shift, and enter state 100
	'<='           shift, and enter state 101
	and            shift, and enter state 102
	or             shift, and enter state 103
	div            shift, and enter state 104
	mod            shift, and enter state 105
	with           reduce using rule 8
	end            reduce using rule 8
	if             reduce using rule 8
	while          reduce using rule 8
	for            reduce using rule 8
	repeat         reduce using rule 8
	return         reduce using rule 8


State 171

	BloqueR -> BloqueR AnidR .                          (rule 6)

	with           reduce using rule 6
	end            reduce using rule 6
	if             reduce using rule 6
	while          reduce using rule 6
	for            reduce using rule 6
	repeat         reduce using rule 6
	return         reduce using rule 6


State 172

	FunDec -> func identifier '(' Param ')' '->' Tipo begin BloqueR end . ';'    (rule 26)

	';'            shift, and enter state 179


State 173

	BIf -> if Expr then Bloque else Bloque end . ';'    (rule 29)

	';'            shift, and enter state 178


State 174

	BFor -> for identifier from Expr to Expr do . Bloque end ';'    (rule 10)

	with           shift, and enter state 36
	if             shift, and enter state 37
	while          shift, and enter state 38
	for            shift, and enter state 39
	repeat         shift, and enter state 40
	identifier     shift, and enter state 41
	writeln        shift, and enter state 42
	write          shift, and enter state 43
	read           shift, and enter state 44

	BWhile         goto state 22
	BFor           goto state 23
	BRep           goto state 24
	Bloque         goto state 177
	AnidS          goto state 26
	BIf            goto state 27
	BWith          goto state 28
	ListaIn        goto state 29
	Ins            goto state 30
	Asig           goto state 31
	Leer           goto state 32
	Escribir       goto state 33
	EscribirLn     goto state 34
	Funcion        goto state 35

State 175

	BFor -> for identifier from Expr to Expr by . Expr do Bloque end ';'    (rule 11)

	'-'            shift, and enter state 60
	'('            shift, and enter state 61
	not            shift, and enter state 62
	true           shift, and enter state 63
	false          shift, and enter state 64
	integer        shift, and enter state 65
	floating       shift, and enter state 66
	identifier     shift, and enter state 68

	Funcion        goto state 58
	Expr           goto state 176

State 176

	BFor -> for identifier from Expr to Expr by Expr . do Bloque end ';'    (rule 11)
	Expr -> Expr . or Expr                              (rule 60)
	Expr -> Expr . and Expr                             (rule 61)
	Expr -> Expr . '==' Expr                            (rule 62)
	Expr -> Expr . '/=' Expr                            (rule 63)
	Expr -> Expr . '<' Expr                             (rule 64)
	Expr -> Expr . '<=' Expr                            (rule 65)
	Expr -> Expr . '>' Expr                             (rule 66)
	Expr -> Expr . '>=' Expr                            (rule 67)
	Expr -> Expr . '+' Expr                             (rule 68)
	Expr -> Expr . '-' Expr                             (rule 69)
	Expr -> Expr . '*' Expr                             (rule 70)
	Expr -> Expr . '/' Expr                             (rule 71)
	Expr -> Expr . '%' Expr                             (rule 72)
	Expr -> Expr . div Expr                             (rule 73)
	Expr -> Expr . mod Expr                             (rule 74)

	'%'            shift, and enter state 91
	'/'            shift, and enter state 92
	'*'            shift, and enter state 93
	'-'            shift, and enter state 94
	'+'            shift, and enter state 95
	'<'            shift, and enter state 96
	'>'            shift, and enter state 97
	'=='           shift, and enter state 98
	'/='           shift, and enter state 99
	'>='           shift, and enter state 100
	'<='           shift, and enter state 101
	and            shift, and enter state 102
	or             shift, and enter state 103
	div            shift, and enter state 104
	mod            shift, and enter state 105
	do             shift, and enter state 181


State 177

	BFor -> for identifier from Expr to Expr do Bloque . end ';'    (rule 10)
	Bloque -> Bloque . AnidS                            (rule 14)

	with           shift, and enter state 36
	end            shift, and enter state 180
	if             shift, and enter state 37
	while          shift, and enter state 38
	for            shift, and enter state 39
	repeat         shift, and enter state 40

	BWhile         goto state 22
	BFor           goto state 23
	BRep           goto state 24
	AnidS          goto state 79
	BIf            goto state 27
	BWith          goto state 28

State 178

	BIf -> if Expr then Bloque else Bloque end ';' .    (rule 29)

	with           reduce using rule 29
	end            reduce using rule 29
	if             reduce using rule 29
	else           reduce using rule 29
	while          reduce using rule 29
	for            reduce using rule 29
	repeat         reduce using rule 29
	return         reduce using rule 29


State 179

	FunDec -> func identifier '(' Param ')' '->' Tipo begin BloqueR end ';' .    (rule 26)

	func           reduce using rule 26
	program        reduce using rule 26


State 180

	BFor -> for identifier from Expr to Expr do Bloque end . ';'    (rule 10)

	';'            shift, and enter state 183


State 181

	BFor -> for identifier from Expr to Expr by Expr do . Bloque end ';'    (rule 11)

	with           shift, and enter state 36
	if             shift, and enter state 37
	while          shift, and enter state 38
	for            shift, and enter state 39
	repeat         shift, and enter state 40
	identifier     shift, and enter state 41
	writeln        shift, and enter state 42
	write          shift, and enter state 43
	read           shift, and enter state 44

	BWhile         goto state 22
	BFor           goto state 23
	BRep           goto state 24
	Bloque         goto state 182
	AnidS          goto state 26
	BIf            goto state 27
	BWith          goto state 28
	ListaIn        goto state 29
	Ins            goto state 30
	Asig           goto state 31
	Leer           goto state 32
	Escribir       goto state 33
	EscribirLn     goto state 34
	Funcion        goto state 35

State 182

	BFor -> for identifier from Expr to Expr by Expr do Bloque . end ';'    (rule 11)
	Bloque -> Bloque . AnidS                            (rule 14)

	with           shift, and enter state 36
	end            shift, and enter state 184
	if             shift, and enter state 37
	while          shift, and enter state 38
	for            shift, and enter state 39
	repeat         shift, and enter state 40

	BWhile         goto state 22
	BFor           goto state 23
	BRep           goto state 24
	AnidS          goto state 79
	BIf            goto state 27
	BWith          goto state 28

State 183

	BFor -> for identifier from Expr to Expr do Bloque end ';' .    (rule 10)

	with           reduce using rule 10
	end            reduce using rule 10
	if             reduce using rule 10
	else           reduce using rule 10
	while          reduce using rule 10
	for            reduce using rule 10
	repeat         reduce using rule 10
	return         reduce using rule 10


State 184

	BFor -> for identifier from Expr to Expr by Expr do Bloque end . ';'    (rule 11)

	';'            shift, and enter state 185


State 185

	BFor -> for identifier from Expr to Expr by Expr do Bloque end ';' .    (rule 11)

	with           reduce using rule 11
	end            reduce using rule 11
	if             reduce using rule 11
	else           reduce using rule 11
	while          reduce using rule 11
	for            reduce using rule 11
	repeat         reduce using rule 11
	return         reduce using rule 11


-----------------------------------------------------------------------------
Grammar Totals
-----------------------------------------------------------------------------
Number of rules: 84
Number of terminals: 50
Number of non-terminals: 31
Number of states: 186
