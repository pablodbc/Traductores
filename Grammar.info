-----------------------------------------------------------------------------
Info file generated by Happy Version 1.19.5 from Grammar.y
-----------------------------------------------------------------------------


terminal '=' is unused
terminal ';' is unused
terminal '->' is unused
terminal number is unused
terminal boolean is unused
terminal with is unused
terminal do is unused
terminal end is unused
terminal if is unused
terminal then is unused
terminal else is unused
terminal while is unused
terminal for is unused
terminal repeat is unused
terminal begin is unused
terminal return is unused
terminal func is unused
terminal times is unused
terminal program is unused
terminal str is unused
terminal writeln is unused
terminal write is unused

-----------------------------------------------------------------------------
Grammar
-----------------------------------------------------------------------------
	%start_parse -> Expr                               (0)
	Expr -> Expr or Expr                               (1)
	Expr -> Expr and Expr                              (2)
	Expr -> Expr '==' Expr                             (3)
	Expr -> Expr '/=' Expr                             (4)
	Expr -> Expr '<' Expr                              (5)
	Expr -> Expr '>' Expr                              (6)
	Expr -> Expr '<=' Expr                             (7)
	Expr -> Expr '>=' Expr                             (8)
	Expr -> Expr '+' Expr                              (9)
	Expr -> Expr '-' Expr                              (10)
	Expr -> Expr '*' Expr                              (11)
	Expr -> Expr '/' Expr                              (12)
	Expr -> Expr '%' Expr                              (13)
	Expr -> Expr div Expr                              (14)
	Expr -> Expr mod Expr                              (15)
	Expr -> '(' Expr ')'                               (16)
	Expr -> not Expr                                   (17)
	Expr -> '-' Expr                                   (18)
	Expr -> integer                                    (19)
	Expr -> floating                                   (20)
	Expr -> true                                       (21)
	Expr -> false                                      (22)
	Expr -> identifier                                 (23)
	Expr -> Funcion                                    (24)
	Funcion -> identifier '(' ')'                      (25)
	Funcion -> identifier '(' Args ')'                 (26)
	Args -> Expr                                       (27)
	Args -> Args ',' Expr                              (28)

-----------------------------------------------------------------------------
Terminals
-----------------------------------------------------------------------------
	'%'            { (\(Modex _,_)        -> Modex _) }
	'/'            { (\(Divex _,_)         -> Divex _) }
	'*'            { (\(Mult _,_)           -> Mult _) }
	'-'            { (\(Minus _,_)          -> Minus _) }
	')'            { (\(CloseP _,_)         -> CloseP _) }
	'('            { (\(OpenP _,_)          -> OpenP _) }
	'+'            { (\(Plus _,_)           -> Plus _) }
	'='            { (\(Def _,_)            -> Def _) }
	';'            { (\(SemiColon _,_)      -> SemiColon _) }
	','            { (\(Comma _,_)          -> Comma _) }
	'<'            { (\(Less _,_)           -> Less _) }
	'>'            { (\(More _,_)           -> More _) }
	'=='           { (\(Eq _,_)             -> Eq _) }
	'/='           { (\(Neq _,_)            -> Neq _) }
	'>='           { (\(Moreq _,_)          -> Moreq _) }
	'<='           { (\(Lesseq _,_)         -> Lesseq _) }
	'->'           { (\(Arrow _,_)          -> Arrow _) }
	not            { (\(Not _,_)            -> Not _) }
	and            { (\(And _,_)            -> And _) }
	or             { (\(Or _,_)             -> Or _) }
	div            { (\(Div _,_)            -> Div _) }
	mod            { (\(Mod _,_)            -> Mod _) }
	number         { (\(Number _,_)         -> Number _) }
	boolean        { (\(Boolean _,_)        -> Boolean _) }
	true           { (\(True' _,_)          -> True' _) }
	false          { (\(False' _,_)         -> False' _) }
	with           { (\(With _,_)           -> With _) }
	do             { (\(Do _,_)             -> Do _) }
	end            { (\(End _,_)            -> End _) }
	if             { (\(If _,_)             -> If _) }
	then           { (\(Then _,_)           -> Then _) }
	else           { (\(Else _,_)           -> Else _) }
	while          { (\(While _,_)          -> While _) }
	for            { (\(For _,_)            -> For _) }
	repeat         { (\(Repeat _,_)         -> Repeat _) }
	begin          { (\(Begin _,_)          -> Begin _) }
	return         { (\(Return _,_)         -> Return _) }
	func           { (\(Func _,_)           -> Func _) }
	times          { (\(Times _,_)          -> Times _) }
	program        { (\(Program _,_)        -> Program _) }
	integer        { (\(Integer _ ,_)     -> Integer _) }
	floating       { (\(Floating _ ,_)    -> FLoating _) }
	str            { (\(Str _,_)            -> Str _) }
	identifier     { (\(Identifier _,_)     -> Identifier _) }
	writeln        { (\(WriteLn _,_)        -> WriteLn _) }
	write          { (\(Write _,_)          -> Write _) }

-----------------------------------------------------------------------------
Non-terminals
-----------------------------------------------------------------------------
	%start_parse    rule  0
	Expr            rules 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24
	Funcion         rules 25, 26
	Args            rules 27, 28

-----------------------------------------------------------------------------
States
-----------------------------------------------------------------------------
State 0


	'-'            shift, and enter state 4
	'('            shift, and enter state 5
	not            shift, and enter state 6
	true           shift, and enter state 7
	false          shift, and enter state 8
	integer        shift, and enter state 9
	floating       shift, and enter state 10
	identifier     shift, and enter state 11

	Expr           goto state 12
	Funcion        goto state 3

State 1


	'-'            shift, and enter state 4
	'('            shift, and enter state 5
	not            shift, and enter state 6
	true           shift, and enter state 7
	false          shift, and enter state 8
	integer        shift, and enter state 9
	floating       shift, and enter state 10
	identifier     shift, and enter state 11

	Expr           goto state 2
	Funcion        goto state 3

State 2

	Expr -> Expr . or Expr                              (rule 1)
	Expr -> Expr . and Expr                             (rule 2)
	Expr -> Expr . '==' Expr                            (rule 3)
	Expr -> Expr . '/=' Expr                            (rule 4)
	Expr -> Expr . '<' Expr                             (rule 5)
	Expr -> Expr . '>' Expr                             (rule 6)
	Expr -> Expr . '<=' Expr                            (rule 7)
	Expr -> Expr . '>=' Expr                            (rule 8)
	Expr -> Expr . '+' Expr                             (rule 9)
	Expr -> Expr . '-' Expr                             (rule 10)
	Expr -> Expr . '*' Expr                             (rule 11)
	Expr -> Expr . '/' Expr                             (rule 12)
	Expr -> Expr . '%' Expr                             (rule 13)
	Expr -> Expr . div Expr                             (rule 14)
	Expr -> Expr . mod Expr                             (rule 15)

	'%'            shift, and enter state 13
	'/'            shift, and enter state 14
	'*'            shift, and enter state 15
	'-'            shift, and enter state 16
	'+'            shift, and enter state 17
	'<'            shift, and enter state 18
	'>'            shift, and enter state 19
	'=='           shift, and enter state 20
	'/='           shift, and enter state 21
	'>='           shift, and enter state 22
	'<='           shift, and enter state 23
	and            shift, and enter state 24
	or             shift, and enter state 25
	div            shift, and enter state 26
	mod            shift, and enter state 27


State 3

	Expr -> Funcion .                                   (rule 24)

	'%'            reduce using rule 24
	'/'            reduce using rule 24
	'*'            reduce using rule 24
	'-'            reduce using rule 24
	')'            reduce using rule 24
	'+'            reduce using rule 24
	','            reduce using rule 24
	'<'            reduce using rule 24
	'>'            reduce using rule 24
	'=='           reduce using rule 24
	'/='           reduce using rule 24
	'>='           reduce using rule 24
	'<='           reduce using rule 24
	and            reduce using rule 24
	or             reduce using rule 24
	div            reduce using rule 24
	mod            reduce using rule 24
	%eof           reduce using rule 24


State 4

	Expr -> '-' . Expr                                  (rule 18)

	'-'            shift, and enter state 4
	'('            shift, and enter state 5
	not            shift, and enter state 6
	true           shift, and enter state 7
	false          shift, and enter state 8
	integer        shift, and enter state 9
	floating       shift, and enter state 10
	identifier     shift, and enter state 11

	Expr           goto state 31
	Funcion        goto state 3

State 5

	Expr -> '(' . Expr ')'                              (rule 16)

	'-'            shift, and enter state 4
	'('            shift, and enter state 5
	not            shift, and enter state 6
	true           shift, and enter state 7
	false          shift, and enter state 8
	integer        shift, and enter state 9
	floating       shift, and enter state 10
	identifier     shift, and enter state 11

	Expr           goto state 30
	Funcion        goto state 3

State 6

	Expr -> not . Expr                                  (rule 17)

	'-'            shift, and enter state 4
	'('            shift, and enter state 5
	not            shift, and enter state 6
	true           shift, and enter state 7
	false          shift, and enter state 8
	integer        shift, and enter state 9
	floating       shift, and enter state 10
	identifier     shift, and enter state 11

	Expr           goto state 29
	Funcion        goto state 3

State 7

	Expr -> true .                                      (rule 21)

	'%'            reduce using rule 21
	'/'            reduce using rule 21
	'*'            reduce using rule 21
	'-'            reduce using rule 21
	')'            reduce using rule 21
	'+'            reduce using rule 21
	','            reduce using rule 21
	'<'            reduce using rule 21
	'>'            reduce using rule 21
	'=='           reduce using rule 21
	'/='           reduce using rule 21
	'>='           reduce using rule 21
	'<='           reduce using rule 21
	and            reduce using rule 21
	or             reduce using rule 21
	div            reduce using rule 21
	mod            reduce using rule 21
	%eof           reduce using rule 21


State 8

	Expr -> false .                                     (rule 22)

	'%'            reduce using rule 22
	'/'            reduce using rule 22
	'*'            reduce using rule 22
	'-'            reduce using rule 22
	')'            reduce using rule 22
	'+'            reduce using rule 22
	','            reduce using rule 22
	'<'            reduce using rule 22
	'>'            reduce using rule 22
	'=='           reduce using rule 22
	'/='           reduce using rule 22
	'>='           reduce using rule 22
	'<='           reduce using rule 22
	and            reduce using rule 22
	or             reduce using rule 22
	div            reduce using rule 22
	mod            reduce using rule 22
	%eof           reduce using rule 22


State 9

	Expr -> integer .                                   (rule 19)

	'%'            reduce using rule 19
	'/'            reduce using rule 19
	'*'            reduce using rule 19
	'-'            reduce using rule 19
	')'            reduce using rule 19
	'+'            reduce using rule 19
	','            reduce using rule 19
	'<'            reduce using rule 19
	'>'            reduce using rule 19
	'=='           reduce using rule 19
	'/='           reduce using rule 19
	'>='           reduce using rule 19
	'<='           reduce using rule 19
	and            reduce using rule 19
	or             reduce using rule 19
	div            reduce using rule 19
	mod            reduce using rule 19
	%eof           reduce using rule 19


State 10

	Expr -> floating .                                  (rule 20)

	'%'            reduce using rule 20
	'/'            reduce using rule 20
	'*'            reduce using rule 20
	'-'            reduce using rule 20
	')'            reduce using rule 20
	'+'            reduce using rule 20
	','            reduce using rule 20
	'<'            reduce using rule 20
	'>'            reduce using rule 20
	'=='           reduce using rule 20
	'/='           reduce using rule 20
	'>='           reduce using rule 20
	'<='           reduce using rule 20
	and            reduce using rule 20
	or             reduce using rule 20
	div            reduce using rule 20
	mod            reduce using rule 20
	%eof           reduce using rule 20


State 11

	Expr -> identifier .                                (rule 23)
	Funcion -> identifier . '(' ')'                     (rule 25)
	Funcion -> identifier . '(' Args ')'                (rule 26)

	'%'            reduce using rule 23
	'/'            reduce using rule 23
	'*'            reduce using rule 23
	'-'            reduce using rule 23
	')'            reduce using rule 23
	'('            shift, and enter state 28
	'+'            reduce using rule 23
	','            reduce using rule 23
	'<'            reduce using rule 23
	'>'            reduce using rule 23
	'=='           reduce using rule 23
	'/='           reduce using rule 23
	'>='           reduce using rule 23
	'<='           reduce using rule 23
	and            reduce using rule 23
	or             reduce using rule 23
	div            reduce using rule 23
	mod            reduce using rule 23
	%eof           reduce using rule 23


State 12

	%start_parse -> Expr .                              (rule 0)
	Expr -> Expr . or Expr                              (rule 1)
	Expr -> Expr . and Expr                             (rule 2)
	Expr -> Expr . '==' Expr                            (rule 3)
	Expr -> Expr . '/=' Expr                            (rule 4)
	Expr -> Expr . '<' Expr                             (rule 5)
	Expr -> Expr . '>' Expr                             (rule 6)
	Expr -> Expr . '<=' Expr                            (rule 7)
	Expr -> Expr . '>=' Expr                            (rule 8)
	Expr -> Expr . '+' Expr                             (rule 9)
	Expr -> Expr . '-' Expr                             (rule 10)
	Expr -> Expr . '*' Expr                             (rule 11)
	Expr -> Expr . '/' Expr                             (rule 12)
	Expr -> Expr . '%' Expr                             (rule 13)
	Expr -> Expr . div Expr                             (rule 14)
	Expr -> Expr . mod Expr                             (rule 15)

	'%'            shift, and enter state 13
	'/'            shift, and enter state 14
	'*'            shift, and enter state 15
	'-'            shift, and enter state 16
	'+'            shift, and enter state 17
	'<'            shift, and enter state 18
	'>'            shift, and enter state 19
	'=='           shift, and enter state 20
	'/='           shift, and enter state 21
	'>='           shift, and enter state 22
	'<='           shift, and enter state 23
	and            shift, and enter state 24
	or             shift, and enter state 25
	div            shift, and enter state 26
	mod            shift, and enter state 27
	%eof           accept


State 13

	Expr -> Expr '%' . Expr                             (rule 13)

	'-'            shift, and enter state 4
	'('            shift, and enter state 5
	not            shift, and enter state 6
	true           shift, and enter state 7
	false          shift, and enter state 8
	integer        shift, and enter state 9
	floating       shift, and enter state 10
	identifier     shift, and enter state 11

	Expr           goto state 50
	Funcion        goto state 3

State 14

	Expr -> Expr '/' . Expr                             (rule 12)

	'-'            shift, and enter state 4
	'('            shift, and enter state 5
	not            shift, and enter state 6
	true           shift, and enter state 7
	false          shift, and enter state 8
	integer        shift, and enter state 9
	floating       shift, and enter state 10
	identifier     shift, and enter state 11

	Expr           goto state 49
	Funcion        goto state 3

State 15

	Expr -> Expr '*' . Expr                             (rule 11)

	'-'            shift, and enter state 4
	'('            shift, and enter state 5
	not            shift, and enter state 6
	true           shift, and enter state 7
	false          shift, and enter state 8
	integer        shift, and enter state 9
	floating       shift, and enter state 10
	identifier     shift, and enter state 11

	Expr           goto state 48
	Funcion        goto state 3

State 16

	Expr -> Expr '-' . Expr                             (rule 10)

	'-'            shift, and enter state 4
	'('            shift, and enter state 5
	not            shift, and enter state 6
	true           shift, and enter state 7
	false          shift, and enter state 8
	integer        shift, and enter state 9
	floating       shift, and enter state 10
	identifier     shift, and enter state 11

	Expr           goto state 47
	Funcion        goto state 3

State 17

	Expr -> Expr '+' . Expr                             (rule 9)

	'-'            shift, and enter state 4
	'('            shift, and enter state 5
	not            shift, and enter state 6
	true           shift, and enter state 7
	false          shift, and enter state 8
	integer        shift, and enter state 9
	floating       shift, and enter state 10
	identifier     shift, and enter state 11

	Expr           goto state 46
	Funcion        goto state 3

State 18

	Expr -> Expr '<' . Expr                             (rule 5)

	'-'            shift, and enter state 4
	'('            shift, and enter state 5
	not            shift, and enter state 6
	true           shift, and enter state 7
	false          shift, and enter state 8
	integer        shift, and enter state 9
	floating       shift, and enter state 10
	identifier     shift, and enter state 11

	Expr           goto state 45
	Funcion        goto state 3

State 19

	Expr -> Expr '>' . Expr                             (rule 6)

	'-'            shift, and enter state 4
	'('            shift, and enter state 5
	not            shift, and enter state 6
	true           shift, and enter state 7
	false          shift, and enter state 8
	integer        shift, and enter state 9
	floating       shift, and enter state 10
	identifier     shift, and enter state 11

	Expr           goto state 44
	Funcion        goto state 3

State 20

	Expr -> Expr '==' . Expr                            (rule 3)

	'-'            shift, and enter state 4
	'('            shift, and enter state 5
	not            shift, and enter state 6
	true           shift, and enter state 7
	false          shift, and enter state 8
	integer        shift, and enter state 9
	floating       shift, and enter state 10
	identifier     shift, and enter state 11

	Expr           goto state 43
	Funcion        goto state 3

State 21

	Expr -> Expr '/=' . Expr                            (rule 4)

	'-'            shift, and enter state 4
	'('            shift, and enter state 5
	not            shift, and enter state 6
	true           shift, and enter state 7
	false          shift, and enter state 8
	integer        shift, and enter state 9
	floating       shift, and enter state 10
	identifier     shift, and enter state 11

	Expr           goto state 42
	Funcion        goto state 3

State 22

	Expr -> Expr '>=' . Expr                            (rule 8)

	'-'            shift, and enter state 4
	'('            shift, and enter state 5
	not            shift, and enter state 6
	true           shift, and enter state 7
	false          shift, and enter state 8
	integer        shift, and enter state 9
	floating       shift, and enter state 10
	identifier     shift, and enter state 11

	Expr           goto state 41
	Funcion        goto state 3

State 23

	Expr -> Expr '<=' . Expr                            (rule 7)

	'-'            shift, and enter state 4
	'('            shift, and enter state 5
	not            shift, and enter state 6
	true           shift, and enter state 7
	false          shift, and enter state 8
	integer        shift, and enter state 9
	floating       shift, and enter state 10
	identifier     shift, and enter state 11

	Expr           goto state 40
	Funcion        goto state 3

State 24

	Expr -> Expr and . Expr                             (rule 2)

	'-'            shift, and enter state 4
	'('            shift, and enter state 5
	not            shift, and enter state 6
	true           shift, and enter state 7
	false          shift, and enter state 8
	integer        shift, and enter state 9
	floating       shift, and enter state 10
	identifier     shift, and enter state 11

	Expr           goto state 39
	Funcion        goto state 3

State 25

	Expr -> Expr or . Expr                              (rule 1)

	'-'            shift, and enter state 4
	'('            shift, and enter state 5
	not            shift, and enter state 6
	true           shift, and enter state 7
	false          shift, and enter state 8
	integer        shift, and enter state 9
	floating       shift, and enter state 10
	identifier     shift, and enter state 11

	Expr           goto state 38
	Funcion        goto state 3

State 26

	Expr -> Expr div . Expr                             (rule 14)

	'-'            shift, and enter state 4
	'('            shift, and enter state 5
	not            shift, and enter state 6
	true           shift, and enter state 7
	false          shift, and enter state 8
	integer        shift, and enter state 9
	floating       shift, and enter state 10
	identifier     shift, and enter state 11

	Expr           goto state 37
	Funcion        goto state 3

State 27

	Expr -> Expr mod . Expr                             (rule 15)

	'-'            shift, and enter state 4
	'('            shift, and enter state 5
	not            shift, and enter state 6
	true           shift, and enter state 7
	false          shift, and enter state 8
	integer        shift, and enter state 9
	floating       shift, and enter state 10
	identifier     shift, and enter state 11

	Expr           goto state 36
	Funcion        goto state 3

State 28

	Funcion -> identifier '(' . ')'                     (rule 25)
	Funcion -> identifier '(' . Args ')'                (rule 26)

	'-'            shift, and enter state 4
	')'            shift, and enter state 35
	'('            shift, and enter state 5
	not            shift, and enter state 6
	true           shift, and enter state 7
	false          shift, and enter state 8
	integer        shift, and enter state 9
	floating       shift, and enter state 10
	identifier     shift, and enter state 11

	Expr           goto state 33
	Funcion        goto state 3
	Args           goto state 34

State 29

	Expr -> Expr . or Expr                              (rule 1)
	Expr -> Expr . and Expr                             (rule 2)
	Expr -> Expr . '==' Expr                            (rule 3)
	Expr -> Expr . '/=' Expr                            (rule 4)
	Expr -> Expr . '<' Expr                             (rule 5)
	Expr -> Expr . '>' Expr                             (rule 6)
	Expr -> Expr . '<=' Expr                            (rule 7)
	Expr -> Expr . '>=' Expr                            (rule 8)
	Expr -> Expr . '+' Expr                             (rule 9)
	Expr -> Expr . '-' Expr                             (rule 10)
	Expr -> Expr . '*' Expr                             (rule 11)
	Expr -> Expr . '/' Expr                             (rule 12)
	Expr -> Expr . '%' Expr                             (rule 13)
	Expr -> Expr . div Expr                             (rule 14)
	Expr -> Expr . mod Expr                             (rule 15)
	Expr -> not Expr .                                  (rule 17)

	'%'            reduce using rule 17
	'/'            reduce using rule 17
	'*'            reduce using rule 17
	'-'            reduce using rule 17
	')'            reduce using rule 17
	'+'            reduce using rule 17
	','            reduce using rule 17
	'<'            reduce using rule 17
	'>'            reduce using rule 17
	'=='           reduce using rule 17
	'/='           reduce using rule 17
	'>='           reduce using rule 17
	'<='           reduce using rule 17
	and            reduce using rule 17
	or             reduce using rule 17
	div            reduce using rule 17
	mod            reduce using rule 17
	%eof           reduce using rule 17


State 30

	Expr -> Expr . or Expr                              (rule 1)
	Expr -> Expr . and Expr                             (rule 2)
	Expr -> Expr . '==' Expr                            (rule 3)
	Expr -> Expr . '/=' Expr                            (rule 4)
	Expr -> Expr . '<' Expr                             (rule 5)
	Expr -> Expr . '>' Expr                             (rule 6)
	Expr -> Expr . '<=' Expr                            (rule 7)
	Expr -> Expr . '>=' Expr                            (rule 8)
	Expr -> Expr . '+' Expr                             (rule 9)
	Expr -> Expr . '-' Expr                             (rule 10)
	Expr -> Expr . '*' Expr                             (rule 11)
	Expr -> Expr . '/' Expr                             (rule 12)
	Expr -> Expr . '%' Expr                             (rule 13)
	Expr -> Expr . div Expr                             (rule 14)
	Expr -> Expr . mod Expr                             (rule 15)
	Expr -> '(' Expr . ')'                              (rule 16)

	'%'            shift, and enter state 13
	'/'            shift, and enter state 14
	'*'            shift, and enter state 15
	'-'            shift, and enter state 16
	')'            shift, and enter state 32
	'+'            shift, and enter state 17
	'<'            shift, and enter state 18
	'>'            shift, and enter state 19
	'=='           shift, and enter state 20
	'/='           shift, and enter state 21
	'>='           shift, and enter state 22
	'<='           shift, and enter state 23
	and            shift, and enter state 24
	or             shift, and enter state 25
	div            shift, and enter state 26
	mod            shift, and enter state 27


State 31

	Expr -> Expr . or Expr                              (rule 1)
	Expr -> Expr . and Expr                             (rule 2)
	Expr -> Expr . '==' Expr                            (rule 3)
	Expr -> Expr . '/=' Expr                            (rule 4)
	Expr -> Expr . '<' Expr                             (rule 5)
	Expr -> Expr . '>' Expr                             (rule 6)
	Expr -> Expr . '<=' Expr                            (rule 7)
	Expr -> Expr . '>=' Expr                            (rule 8)
	Expr -> Expr . '+' Expr                             (rule 9)
	Expr -> Expr . '-' Expr                             (rule 10)
	Expr -> Expr . '*' Expr                             (rule 11)
	Expr -> Expr . '/' Expr                             (rule 12)
	Expr -> Expr . '%' Expr                             (rule 13)
	Expr -> Expr . div Expr                             (rule 14)
	Expr -> Expr . mod Expr                             (rule 15)
	Expr -> '-' Expr .                                  (rule 18)

	'%'            reduce using rule 18
	'/'            reduce using rule 18
	'*'            reduce using rule 18
	'-'            reduce using rule 18
	')'            reduce using rule 18
	'+'            reduce using rule 18
	','            reduce using rule 18
	'<'            reduce using rule 18
	'>'            reduce using rule 18
	'=='           reduce using rule 18
	'/='           reduce using rule 18
	'>='           reduce using rule 18
	'<='           reduce using rule 18
	and            reduce using rule 18
	or             reduce using rule 18
	div            reduce using rule 18
	mod            reduce using rule 18
	%eof           reduce using rule 18


State 32

	Expr -> '(' Expr ')' .                              (rule 16)

	'%'            reduce using rule 16
	'/'            reduce using rule 16
	'*'            reduce using rule 16
	'-'            reduce using rule 16
	')'            reduce using rule 16
	'+'            reduce using rule 16
	','            reduce using rule 16
	'<'            reduce using rule 16
	'>'            reduce using rule 16
	'=='           reduce using rule 16
	'/='           reduce using rule 16
	'>='           reduce using rule 16
	'<='           reduce using rule 16
	and            reduce using rule 16
	or             reduce using rule 16
	div            reduce using rule 16
	mod            reduce using rule 16
	%eof           reduce using rule 16


State 33

	Expr -> Expr . or Expr                              (rule 1)
	Expr -> Expr . and Expr                             (rule 2)
	Expr -> Expr . '==' Expr                            (rule 3)
	Expr -> Expr . '/=' Expr                            (rule 4)
	Expr -> Expr . '<' Expr                             (rule 5)
	Expr -> Expr . '>' Expr                             (rule 6)
	Expr -> Expr . '<=' Expr                            (rule 7)
	Expr -> Expr . '>=' Expr                            (rule 8)
	Expr -> Expr . '+' Expr                             (rule 9)
	Expr -> Expr . '-' Expr                             (rule 10)
	Expr -> Expr . '*' Expr                             (rule 11)
	Expr -> Expr . '/' Expr                             (rule 12)
	Expr -> Expr . '%' Expr                             (rule 13)
	Expr -> Expr . div Expr                             (rule 14)
	Expr -> Expr . mod Expr                             (rule 15)
	Args -> Expr .                                      (rule 27)

	'%'            shift, and enter state 13
	'/'            shift, and enter state 14
	'*'            shift, and enter state 15
	'-'            shift, and enter state 16
	')'            reduce using rule 27
	'+'            shift, and enter state 17
	','            reduce using rule 27
	'<'            shift, and enter state 18
	'>'            shift, and enter state 19
	'=='           shift, and enter state 20
	'/='           shift, and enter state 21
	'>='           shift, and enter state 22
	'<='           shift, and enter state 23
	and            shift, and enter state 24
	or             shift, and enter state 25
	div            shift, and enter state 26
	mod            shift, and enter state 27


State 34

	Funcion -> identifier '(' Args . ')'                (rule 26)
	Args -> Args . ',' Expr                             (rule 28)

	')'            shift, and enter state 51
	','            shift, and enter state 52


State 35

	Funcion -> identifier '(' ')' .                     (rule 25)

	'%'            reduce using rule 25
	'/'            reduce using rule 25
	'*'            reduce using rule 25
	'-'            reduce using rule 25
	')'            reduce using rule 25
	'+'            reduce using rule 25
	','            reduce using rule 25
	'<'            reduce using rule 25
	'>'            reduce using rule 25
	'=='           reduce using rule 25
	'/='           reduce using rule 25
	'>='           reduce using rule 25
	'<='           reduce using rule 25
	and            reduce using rule 25
	or             reduce using rule 25
	div            reduce using rule 25
	mod            reduce using rule 25
	%eof           reduce using rule 25


State 36

	Expr -> Expr . or Expr                              (rule 1)
	Expr -> Expr . and Expr                             (rule 2)
	Expr -> Expr . '==' Expr                            (rule 3)
	Expr -> Expr . '/=' Expr                            (rule 4)
	Expr -> Expr . '<' Expr                             (rule 5)
	Expr -> Expr . '>' Expr                             (rule 6)
	Expr -> Expr . '<=' Expr                            (rule 7)
	Expr -> Expr . '>=' Expr                            (rule 8)
	Expr -> Expr . '+' Expr                             (rule 9)
	Expr -> Expr . '-' Expr                             (rule 10)
	Expr -> Expr . '*' Expr                             (rule 11)
	Expr -> Expr . '/' Expr                             (rule 12)
	Expr -> Expr . '%' Expr                             (rule 13)
	Expr -> Expr . div Expr                             (rule 14)
	Expr -> Expr . mod Expr                             (rule 15)
	Expr -> Expr mod Expr .                             (rule 15)

	'%'            reduce using rule 15
	'/'            shift, and enter state 14
	'*'            shift, and enter state 15
	'-'            reduce using rule 15
	')'            reduce using rule 15
	'+'            reduce using rule 15
	','            reduce using rule 15
	'<'            shift, and enter state 18
	'>'            shift, and enter state 19
	'=='           shift, and enter state 20
	'/='           shift, and enter state 21
	'>='           shift, and enter state 22
	'<='           shift, and enter state 23
	and            shift, and enter state 24
	or             reduce using rule 15
	div            shift, and enter state 26
	mod            reduce using rule 15
	%eof           reduce using rule 15


State 37

	Expr -> Expr . or Expr                              (rule 1)
	Expr -> Expr . and Expr                             (rule 2)
	Expr -> Expr . '==' Expr                            (rule 3)
	Expr -> Expr . '/=' Expr                            (rule 4)
	Expr -> Expr . '<' Expr                             (rule 5)
	Expr -> Expr . '>' Expr                             (rule 6)
	Expr -> Expr . '<=' Expr                            (rule 7)
	Expr -> Expr . '>=' Expr                            (rule 8)
	Expr -> Expr . '+' Expr                             (rule 9)
	Expr -> Expr . '-' Expr                             (rule 10)
	Expr -> Expr . '*' Expr                             (rule 11)
	Expr -> Expr . '/' Expr                             (rule 12)
	Expr -> Expr . '%' Expr                             (rule 13)
	Expr -> Expr . div Expr                             (rule 14)
	Expr -> Expr div Expr .                             (rule 14)
	Expr -> Expr . mod Expr                             (rule 15)

	'%'            reduce using rule 14
	'/'            reduce using rule 14
	'*'            reduce using rule 14
	'-'            reduce using rule 14
	')'            reduce using rule 14
	'+'            reduce using rule 14
	','            reduce using rule 14
	'<'            shift, and enter state 18
	'>'            shift, and enter state 19
	'=='           shift, and enter state 20
	'/='           shift, and enter state 21
	'>='           shift, and enter state 22
	'<='           shift, and enter state 23
	and            reduce using rule 14
	or             reduce using rule 14
	div            reduce using rule 14
	mod            reduce using rule 14
	%eof           reduce using rule 14


State 38

	Expr -> Expr . or Expr                              (rule 1)
	Expr -> Expr or Expr .                              (rule 1)
	Expr -> Expr . and Expr                             (rule 2)
	Expr -> Expr . '==' Expr                            (rule 3)
	Expr -> Expr . '/=' Expr                            (rule 4)
	Expr -> Expr . '<' Expr                             (rule 5)
	Expr -> Expr . '>' Expr                             (rule 6)
	Expr -> Expr . '<=' Expr                            (rule 7)
	Expr -> Expr . '>=' Expr                            (rule 8)
	Expr -> Expr . '+' Expr                             (rule 9)
	Expr -> Expr . '-' Expr                             (rule 10)
	Expr -> Expr . '*' Expr                             (rule 11)
	Expr -> Expr . '/' Expr                             (rule 12)
	Expr -> Expr . '%' Expr                             (rule 13)
	Expr -> Expr . div Expr                             (rule 14)
	Expr -> Expr . mod Expr                             (rule 15)

	'%'            shift, and enter state 13
	'/'            shift, and enter state 14
	'*'            shift, and enter state 15
	'-'            reduce using rule 1
	')'            reduce using rule 1
	'+'            reduce using rule 1
	','            reduce using rule 1
	'<'            shift, and enter state 18
	'>'            shift, and enter state 19
	'=='           shift, and enter state 20
	'/='           shift, and enter state 21
	'>='           shift, and enter state 22
	'<='           shift, and enter state 23
	and            shift, and enter state 24
	or             reduce using rule 1
	div            shift, and enter state 26
	mod            shift, and enter state 27
	%eof           reduce using rule 1


State 39

	Expr -> Expr . or Expr                              (rule 1)
	Expr -> Expr . and Expr                             (rule 2)
	Expr -> Expr and Expr .                             (rule 2)
	Expr -> Expr . '==' Expr                            (rule 3)
	Expr -> Expr . '/=' Expr                            (rule 4)
	Expr -> Expr . '<' Expr                             (rule 5)
	Expr -> Expr . '>' Expr                             (rule 6)
	Expr -> Expr . '<=' Expr                            (rule 7)
	Expr -> Expr . '>=' Expr                            (rule 8)
	Expr -> Expr . '+' Expr                             (rule 9)
	Expr -> Expr . '-' Expr                             (rule 10)
	Expr -> Expr . '*' Expr                             (rule 11)
	Expr -> Expr . '/' Expr                             (rule 12)
	Expr -> Expr . '%' Expr                             (rule 13)
	Expr -> Expr . div Expr                             (rule 14)
	Expr -> Expr . mod Expr                             (rule 15)

	'%'            reduce using rule 2
	'/'            reduce using rule 2
	'*'            reduce using rule 2
	'-'            reduce using rule 2
	')'            reduce using rule 2
	'+'            reduce using rule 2
	','            reduce using rule 2
	'<'            shift, and enter state 18
	'>'            shift, and enter state 19
	'=='           shift, and enter state 20
	'/='           shift, and enter state 21
	'>='           shift, and enter state 22
	'<='           shift, and enter state 23
	and            reduce using rule 2
	or             reduce using rule 2
	div            reduce using rule 2
	mod            reduce using rule 2
	%eof           reduce using rule 2


State 40

	Expr -> Expr . or Expr                              (rule 1)
	Expr -> Expr . and Expr                             (rule 2)
	Expr -> Expr . '==' Expr                            (rule 3)
	Expr -> Expr . '/=' Expr                            (rule 4)
	Expr -> Expr . '<' Expr                             (rule 5)
	Expr -> Expr . '>' Expr                             (rule 6)
	Expr -> Expr . '<=' Expr                            (rule 7)
	Expr -> Expr '<=' Expr .                            (rule 7)
	Expr -> Expr . '>=' Expr                            (rule 8)
	Expr -> Expr . '+' Expr                             (rule 9)
	Expr -> Expr . '-' Expr                             (rule 10)
	Expr -> Expr . '*' Expr                             (rule 11)
	Expr -> Expr . '/' Expr                             (rule 12)
	Expr -> Expr . '%' Expr                             (rule 13)
	Expr -> Expr . div Expr                             (rule 14)
	Expr -> Expr . mod Expr                             (rule 15)

	'%'            reduce using rule 7
	'/'            reduce using rule 7
	'*'            reduce using rule 7
	'-'            reduce using rule 7
	')'            reduce using rule 7
	'+'            reduce using rule 7
	','            reduce using rule 7
	'<'            fail
	'>'            fail
	'=='           shift, and enter state 20
	'/='           shift, and enter state 21
	'>='           fail
	'<='           fail
	and            reduce using rule 7
	or             reduce using rule 7
	div            reduce using rule 7
	mod            reduce using rule 7
	%eof           reduce using rule 7


State 41

	Expr -> Expr . or Expr                              (rule 1)
	Expr -> Expr . and Expr                             (rule 2)
	Expr -> Expr . '==' Expr                            (rule 3)
	Expr -> Expr . '/=' Expr                            (rule 4)
	Expr -> Expr . '<' Expr                             (rule 5)
	Expr -> Expr . '>' Expr                             (rule 6)
	Expr -> Expr . '<=' Expr                            (rule 7)
	Expr -> Expr . '>=' Expr                            (rule 8)
	Expr -> Expr '>=' Expr .                            (rule 8)
	Expr -> Expr . '+' Expr                             (rule 9)
	Expr -> Expr . '-' Expr                             (rule 10)
	Expr -> Expr . '*' Expr                             (rule 11)
	Expr -> Expr . '/' Expr                             (rule 12)
	Expr -> Expr . '%' Expr                             (rule 13)
	Expr -> Expr . div Expr                             (rule 14)
	Expr -> Expr . mod Expr                             (rule 15)

	'%'            reduce using rule 8
	'/'            reduce using rule 8
	'*'            reduce using rule 8
	'-'            reduce using rule 8
	')'            reduce using rule 8
	'+'            reduce using rule 8
	','            reduce using rule 8
	'<'            fail
	'>'            fail
	'=='           shift, and enter state 20
	'/='           shift, and enter state 21
	'>='           fail
	'<='           fail
	and            reduce using rule 8
	or             reduce using rule 8
	div            reduce using rule 8
	mod            reduce using rule 8
	%eof           reduce using rule 8


State 42

	Expr -> Expr . or Expr                              (rule 1)
	Expr -> Expr . and Expr                             (rule 2)
	Expr -> Expr . '==' Expr                            (rule 3)
	Expr -> Expr . '/=' Expr                            (rule 4)
	Expr -> Expr '/=' Expr .                            (rule 4)
	Expr -> Expr . '<' Expr                             (rule 5)
	Expr -> Expr . '>' Expr                             (rule 6)
	Expr -> Expr . '<=' Expr                            (rule 7)
	Expr -> Expr . '>=' Expr                            (rule 8)
	Expr -> Expr . '+' Expr                             (rule 9)
	Expr -> Expr . '-' Expr                             (rule 10)
	Expr -> Expr . '*' Expr                             (rule 11)
	Expr -> Expr . '/' Expr                             (rule 12)
	Expr -> Expr . '%' Expr                             (rule 13)
	Expr -> Expr . div Expr                             (rule 14)
	Expr -> Expr . mod Expr                             (rule 15)

	'%'            reduce using rule 4
	'/'            reduce using rule 4
	'*'            reduce using rule 4
	'-'            reduce using rule 4
	')'            reduce using rule 4
	'+'            reduce using rule 4
	','            reduce using rule 4
	'<'            reduce using rule 4
	'>'            reduce using rule 4
	'=='           fail
	'/='           fail
	'>='           reduce using rule 4
	'<='           reduce using rule 4
	and            reduce using rule 4
	or             reduce using rule 4
	div            reduce using rule 4
	mod            reduce using rule 4
	%eof           reduce using rule 4


State 43

	Expr -> Expr . or Expr                              (rule 1)
	Expr -> Expr . and Expr                             (rule 2)
	Expr -> Expr . '==' Expr                            (rule 3)
	Expr -> Expr '==' Expr .                            (rule 3)
	Expr -> Expr . '/=' Expr                            (rule 4)
	Expr -> Expr . '<' Expr                             (rule 5)
	Expr -> Expr . '>' Expr                             (rule 6)
	Expr -> Expr . '<=' Expr                            (rule 7)
	Expr -> Expr . '>=' Expr                            (rule 8)
	Expr -> Expr . '+' Expr                             (rule 9)
	Expr -> Expr . '-' Expr                             (rule 10)
	Expr -> Expr . '*' Expr                             (rule 11)
	Expr -> Expr . '/' Expr                             (rule 12)
	Expr -> Expr . '%' Expr                             (rule 13)
	Expr -> Expr . div Expr                             (rule 14)
	Expr -> Expr . mod Expr                             (rule 15)

	'%'            reduce using rule 3
	'/'            reduce using rule 3
	'*'            reduce using rule 3
	'-'            reduce using rule 3
	')'            reduce using rule 3
	'+'            reduce using rule 3
	','            reduce using rule 3
	'<'            reduce using rule 3
	'>'            reduce using rule 3
	'=='           fail
	'/='           fail
	'>='           reduce using rule 3
	'<='           reduce using rule 3
	and            reduce using rule 3
	or             reduce using rule 3
	div            reduce using rule 3
	mod            reduce using rule 3
	%eof           reduce using rule 3


State 44

	Expr -> Expr . or Expr                              (rule 1)
	Expr -> Expr . and Expr                             (rule 2)
	Expr -> Expr . '==' Expr                            (rule 3)
	Expr -> Expr . '/=' Expr                            (rule 4)
	Expr -> Expr . '<' Expr                             (rule 5)
	Expr -> Expr . '>' Expr                             (rule 6)
	Expr -> Expr '>' Expr .                             (rule 6)
	Expr -> Expr . '<=' Expr                            (rule 7)
	Expr -> Expr . '>=' Expr                            (rule 8)
	Expr -> Expr . '+' Expr                             (rule 9)
	Expr -> Expr . '-' Expr                             (rule 10)
	Expr -> Expr . '*' Expr                             (rule 11)
	Expr -> Expr . '/' Expr                             (rule 12)
	Expr -> Expr . '%' Expr                             (rule 13)
	Expr -> Expr . div Expr                             (rule 14)
	Expr -> Expr . mod Expr                             (rule 15)

	'%'            reduce using rule 6
	'/'            reduce using rule 6
	'*'            reduce using rule 6
	'-'            reduce using rule 6
	')'            reduce using rule 6
	'+'            reduce using rule 6
	','            reduce using rule 6
	'<'            fail
	'>'            fail
	'=='           shift, and enter state 20
	'/='           shift, and enter state 21
	'>='           fail
	'<='           fail
	and            reduce using rule 6
	or             reduce using rule 6
	div            reduce using rule 6
	mod            reduce using rule 6
	%eof           reduce using rule 6


State 45

	Expr -> Expr . or Expr                              (rule 1)
	Expr -> Expr . and Expr                             (rule 2)
	Expr -> Expr . '==' Expr                            (rule 3)
	Expr -> Expr . '/=' Expr                            (rule 4)
	Expr -> Expr . '<' Expr                             (rule 5)
	Expr -> Expr '<' Expr .                             (rule 5)
	Expr -> Expr . '>' Expr                             (rule 6)
	Expr -> Expr . '<=' Expr                            (rule 7)
	Expr -> Expr . '>=' Expr                            (rule 8)
	Expr -> Expr . '+' Expr                             (rule 9)
	Expr -> Expr . '-' Expr                             (rule 10)
	Expr -> Expr . '*' Expr                             (rule 11)
	Expr -> Expr . '/' Expr                             (rule 12)
	Expr -> Expr . '%' Expr                             (rule 13)
	Expr -> Expr . div Expr                             (rule 14)
	Expr -> Expr . mod Expr                             (rule 15)

	'%'            reduce using rule 5
	'/'            reduce using rule 5
	'*'            reduce using rule 5
	'-'            reduce using rule 5
	')'            reduce using rule 5
	'+'            reduce using rule 5
	','            reduce using rule 5
	'<'            fail
	'>'            fail
	'=='           shift, and enter state 20
	'/='           shift, and enter state 21
	'>='           fail
	'<='           fail
	and            reduce using rule 5
	or             reduce using rule 5
	div            reduce using rule 5
	mod            reduce using rule 5
	%eof           reduce using rule 5


State 46

	Expr -> Expr . or Expr                              (rule 1)
	Expr -> Expr . and Expr                             (rule 2)
	Expr -> Expr . '==' Expr                            (rule 3)
	Expr -> Expr . '/=' Expr                            (rule 4)
	Expr -> Expr . '<' Expr                             (rule 5)
	Expr -> Expr . '>' Expr                             (rule 6)
	Expr -> Expr . '<=' Expr                            (rule 7)
	Expr -> Expr . '>=' Expr                            (rule 8)
	Expr -> Expr . '+' Expr                             (rule 9)
	Expr -> Expr '+' Expr .                             (rule 9)
	Expr -> Expr . '-' Expr                             (rule 10)
	Expr -> Expr . '*' Expr                             (rule 11)
	Expr -> Expr . '/' Expr                             (rule 12)
	Expr -> Expr . '%' Expr                             (rule 13)
	Expr -> Expr . div Expr                             (rule 14)
	Expr -> Expr . mod Expr                             (rule 15)

	'%'            shift, and enter state 13
	'/'            shift, and enter state 14
	'*'            shift, and enter state 15
	'-'            reduce using rule 9
	')'            reduce using rule 9
	'+'            reduce using rule 9
	','            reduce using rule 9
	'<'            shift, and enter state 18
	'>'            shift, and enter state 19
	'=='           shift, and enter state 20
	'/='           shift, and enter state 21
	'>='           shift, and enter state 22
	'<='           shift, and enter state 23
	and            shift, and enter state 24
	or             reduce using rule 9
	div            shift, and enter state 26
	mod            shift, and enter state 27
	%eof           reduce using rule 9


State 47

	Expr -> Expr . or Expr                              (rule 1)
	Expr -> Expr . and Expr                             (rule 2)
	Expr -> Expr . '==' Expr                            (rule 3)
	Expr -> Expr . '/=' Expr                            (rule 4)
	Expr -> Expr . '<' Expr                             (rule 5)
	Expr -> Expr . '>' Expr                             (rule 6)
	Expr -> Expr . '<=' Expr                            (rule 7)
	Expr -> Expr . '>=' Expr                            (rule 8)
	Expr -> Expr . '+' Expr                             (rule 9)
	Expr -> Expr . '-' Expr                             (rule 10)
	Expr -> Expr '-' Expr .                             (rule 10)
	Expr -> Expr . '*' Expr                             (rule 11)
	Expr -> Expr . '/' Expr                             (rule 12)
	Expr -> Expr . '%' Expr                             (rule 13)
	Expr -> Expr . div Expr                             (rule 14)
	Expr -> Expr . mod Expr                             (rule 15)

	'%'            shift, and enter state 13
	'/'            shift, and enter state 14
	'*'            shift, and enter state 15
	'-'            reduce using rule 10
	')'            reduce using rule 10
	'+'            reduce using rule 10
	','            reduce using rule 10
	'<'            shift, and enter state 18
	'>'            shift, and enter state 19
	'=='           shift, and enter state 20
	'/='           shift, and enter state 21
	'>='           shift, and enter state 22
	'<='           shift, and enter state 23
	and            shift, and enter state 24
	or             reduce using rule 10
	div            shift, and enter state 26
	mod            shift, and enter state 27
	%eof           reduce using rule 10


State 48

	Expr -> Expr . or Expr                              (rule 1)
	Expr -> Expr . and Expr                             (rule 2)
	Expr -> Expr . '==' Expr                            (rule 3)
	Expr -> Expr . '/=' Expr                            (rule 4)
	Expr -> Expr . '<' Expr                             (rule 5)
	Expr -> Expr . '>' Expr                             (rule 6)
	Expr -> Expr . '<=' Expr                            (rule 7)
	Expr -> Expr . '>=' Expr                            (rule 8)
	Expr -> Expr . '+' Expr                             (rule 9)
	Expr -> Expr . '-' Expr                             (rule 10)
	Expr -> Expr . '*' Expr                             (rule 11)
	Expr -> Expr '*' Expr .                             (rule 11)
	Expr -> Expr . '/' Expr                             (rule 12)
	Expr -> Expr . '%' Expr                             (rule 13)
	Expr -> Expr . div Expr                             (rule 14)
	Expr -> Expr . mod Expr                             (rule 15)

	'%'            reduce using rule 11
	'/'            reduce using rule 11
	'*'            reduce using rule 11
	'-'            reduce using rule 11
	')'            reduce using rule 11
	'+'            reduce using rule 11
	','            reduce using rule 11
	'<'            shift, and enter state 18
	'>'            shift, and enter state 19
	'=='           shift, and enter state 20
	'/='           shift, and enter state 21
	'>='           shift, and enter state 22
	'<='           shift, and enter state 23
	and            reduce using rule 11
	or             reduce using rule 11
	div            reduce using rule 11
	mod            reduce using rule 11
	%eof           reduce using rule 11


State 49

	Expr -> Expr . or Expr                              (rule 1)
	Expr -> Expr . and Expr                             (rule 2)
	Expr -> Expr . '==' Expr                            (rule 3)
	Expr -> Expr . '/=' Expr                            (rule 4)
	Expr -> Expr . '<' Expr                             (rule 5)
	Expr -> Expr . '>' Expr                             (rule 6)
	Expr -> Expr . '<=' Expr                            (rule 7)
	Expr -> Expr . '>=' Expr                            (rule 8)
	Expr -> Expr . '+' Expr                             (rule 9)
	Expr -> Expr . '-' Expr                             (rule 10)
	Expr -> Expr . '*' Expr                             (rule 11)
	Expr -> Expr . '/' Expr                             (rule 12)
	Expr -> Expr '/' Expr .                             (rule 12)
	Expr -> Expr . '%' Expr                             (rule 13)
	Expr -> Expr . div Expr                             (rule 14)
	Expr -> Expr . mod Expr                             (rule 15)

	'%'            reduce using rule 12
	'/'            reduce using rule 12
	'*'            reduce using rule 12
	'-'            reduce using rule 12
	')'            reduce using rule 12
	'+'            reduce using rule 12
	','            reduce using rule 12
	'<'            shift, and enter state 18
	'>'            shift, and enter state 19
	'=='           shift, and enter state 20
	'/='           shift, and enter state 21
	'>='           shift, and enter state 22
	'<='           shift, and enter state 23
	and            reduce using rule 12
	or             reduce using rule 12
	div            reduce using rule 12
	mod            reduce using rule 12
	%eof           reduce using rule 12


State 50

	Expr -> Expr . or Expr                              (rule 1)
	Expr -> Expr . and Expr                             (rule 2)
	Expr -> Expr . '==' Expr                            (rule 3)
	Expr -> Expr . '/=' Expr                            (rule 4)
	Expr -> Expr . '<' Expr                             (rule 5)
	Expr -> Expr . '>' Expr                             (rule 6)
	Expr -> Expr . '<=' Expr                            (rule 7)
	Expr -> Expr . '>=' Expr                            (rule 8)
	Expr -> Expr . '+' Expr                             (rule 9)
	Expr -> Expr . '-' Expr                             (rule 10)
	Expr -> Expr . '*' Expr                             (rule 11)
	Expr -> Expr . '/' Expr                             (rule 12)
	Expr -> Expr . '%' Expr                             (rule 13)
	Expr -> Expr '%' Expr .                             (rule 13)
	Expr -> Expr . div Expr                             (rule 14)
	Expr -> Expr . mod Expr                             (rule 15)

	'%'            reduce using rule 13
	'/'            shift, and enter state 14
	'*'            shift, and enter state 15
	'-'            reduce using rule 13
	')'            reduce using rule 13
	'+'            reduce using rule 13
	','            reduce using rule 13
	'<'            shift, and enter state 18
	'>'            shift, and enter state 19
	'=='           shift, and enter state 20
	'/='           shift, and enter state 21
	'>='           shift, and enter state 22
	'<='           shift, and enter state 23
	and            shift, and enter state 24
	or             reduce using rule 13
	div            shift, and enter state 26
	mod            reduce using rule 13
	%eof           reduce using rule 13


State 51

	Funcion -> identifier '(' Args ')' .                (rule 26)

	'%'            reduce using rule 26
	'/'            reduce using rule 26
	'*'            reduce using rule 26
	'-'            reduce using rule 26
	')'            reduce using rule 26
	'+'            reduce using rule 26
	','            reduce using rule 26
	'<'            reduce using rule 26
	'>'            reduce using rule 26
	'=='           reduce using rule 26
	'/='           reduce using rule 26
	'>='           reduce using rule 26
	'<='           reduce using rule 26
	and            reduce using rule 26
	or             reduce using rule 26
	div            reduce using rule 26
	mod            reduce using rule 26
	%eof           reduce using rule 26


State 52

	Args -> Args ',' . Expr                             (rule 28)

	'-'            shift, and enter state 4
	'('            shift, and enter state 5
	not            shift, and enter state 6
	true           shift, and enter state 7
	false          shift, and enter state 8
	integer        shift, and enter state 9
	floating       shift, and enter state 10
	identifier     shift, and enter state 11

	Expr           goto state 53
	Funcion        goto state 3

State 53

	Expr -> Expr . or Expr                              (rule 1)
	Expr -> Expr . and Expr                             (rule 2)
	Expr -> Expr . '==' Expr                            (rule 3)
	Expr -> Expr . '/=' Expr                            (rule 4)
	Expr -> Expr . '<' Expr                             (rule 5)
	Expr -> Expr . '>' Expr                             (rule 6)
	Expr -> Expr . '<=' Expr                            (rule 7)
	Expr -> Expr . '>=' Expr                            (rule 8)
	Expr -> Expr . '+' Expr                             (rule 9)
	Expr -> Expr . '-' Expr                             (rule 10)
	Expr -> Expr . '*' Expr                             (rule 11)
	Expr -> Expr . '/' Expr                             (rule 12)
	Expr -> Expr . '%' Expr                             (rule 13)
	Expr -> Expr . div Expr                             (rule 14)
	Expr -> Expr . mod Expr                             (rule 15)
	Args -> Args ',' Expr .                             (rule 28)

	'%'            shift, and enter state 13
	'/'            shift, and enter state 14
	'*'            shift, and enter state 15
	'-'            shift, and enter state 16
	')'            reduce using rule 28
	'+'            shift, and enter state 17
	','            reduce using rule 28
	'<'            shift, and enter state 18
	'>'            shift, and enter state 19
	'=='           shift, and enter state 20
	'/='           shift, and enter state 21
	'>='           shift, and enter state 22
	'<='           shift, and enter state 23
	and            shift, and enter state 24
	or             shift, and enter state 25
	div            shift, and enter state 26
	mod            shift, and enter state 27


-----------------------------------------------------------------------------
Grammar Totals
-----------------------------------------------------------------------------
Number of rules: 29
Number of terminals: 46
Number of non-terminals: 4
Number of states: 54
